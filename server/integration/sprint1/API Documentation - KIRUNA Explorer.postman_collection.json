{
	"info": {
		"_postman_id": "47d6cced-7270-453f-9cfa-1154529d8c5d",
		"name": "API Documentation - KIRUNA Explorer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23447628"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "signup",
							"item": [
								{
									"name": "Create a new user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"Response time is within an acceptable range\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Response is not null\", function () {",
													"    pm.expect(pm.response.text()).to.not.be.null;",
													"});",
													"",
													"",
													"pm.test(\"Response follows the expected schema for user data\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.a('string');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"TestName\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"surname\": \"TestSurname\",\n  \"phone\": \"+393275307123\",\n  \"role\": \"PLANNER\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"signup"
											]
										}
									},
									"response": [
										{
											"name": "User created successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"surname\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"role\": \"DEVELOPER\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/signup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"signup"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"surname\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"role\": \"DEVELOPER\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/signup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"signup"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"surname\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"role\": \"DEVELOPER\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/signup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"signup"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "Wrong Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Unauthorized status code\", function () {",
													"    pm.response.to.have.status(403); ",
													"});",
													"",
													"// Test for the specific error message",
													"pm.test(\"Error message for incorrect email\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"message\", \"The user is not authorized\");",
													"});",
													"",
													"// Test to ensure the 'errors' array is empty",
													"pm.test(\"The 'errors' array is empty\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse.errors).to.be.an(\"array\").that.is.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"testuser2@example.com\",\n  \"password\": \"SecurePassword123!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "User logged in successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  {\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Wrong Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Unauthorized status code\", function () {",
													"    pm.response.to.have.status(403); ",
													"});",
													"",
													"// Test for the specific error message",
													"pm.test(\"Error message for incorrect email\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"message\", \"The user is not authorized\");",
													"});",
													"",
													"// Test to ensure the 'errors' array is empty",
													"pm.test(\"The 'errors' array is empty\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse.errors).to.be.an(\"array\").that.is.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword1234!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "User logged in successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  {\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Wrong Input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Unauthorized status code\", function () {",
													"    pm.response.to.have.status(403); ",
													"});",
													"",
													"// Test for the specific error message",
													"pm.test(\"Error message for incorrect email\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"message\", \"The user is not authorized\");",
													"});",
													"",
													"// Test to ensure the 'errors' array is empty",
													"pm.test(\"The 'errors' array is empty\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse.errors).to.be.an(\"array\").that.is.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword1234!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "User logged in successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  {\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Login a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response has the required field 'token'\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('token');",
													"});",
													"",
													"",
													"pm.test(\"Token is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Token is a valid JWT token\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.token).to.be.a('string');",
													"    pm.expect(responseData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
													"});",
													"",
													"// Test to check if the JWT token is set as a cookie",
													"pm.test(\"JWT token is set as a cookie\", function () {",
													"    const cookieValue = pm.response.headers.get('Set-Cookie');",
													"    pm.expect(cookieValue).to.include('auth-token');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "User logged in successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  {\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "me",
							"item": [
								{
									"name": "Get current user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test the response body structure and values",
													"pm.test(\"Response body structure is valid\", function () {",
													"    var responseJSON = pm.response.json();",
													"    pm.expect(responseJSON).to.be.an('object');",
													"",
													"    // Checking for the required properties",
													"    pm.expect(responseJSON).to.have.property('name');",
													"    pm.expect(responseJSON).to.have.property('email');",
													"    pm.expect(responseJSON).to.have.property('surname');",
													"    pm.expect(responseJSON).to.have.property('phone');",
													"    pm.expect(responseJSON).to.have.property('role');",
													"",
													"    // Checking the data types of the properties",
													"    pm.expect(responseJSON.id).to.be.a('string');",
													"    pm.expect(responseJSON.name).to.be.a('string');",
													"    pm.expect(responseJSON.email).to.be.a('string');",
													"    pm.expect(responseJSON.surname).to.be.a('string');",
													"    pm.expect(responseJSON.phone).to.be.a('string');",
													"    pm.expect(responseJSON.role).to.be.a('string');",
													"});",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"All required properties are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('name');",
													"    pm.expect(responseData).to.have.property('email');",
													"    pm.expect(responseData).to.have.property('surname');",
													"    pm.expect(responseData).to.have.property('phone');",
													"    pm.expect(responseData).to.have.property('role');",
													"});",
													"",
													"",
													"pm.test(\"Id, name, email, surname, phone, and role properties are non-empty strings\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
													"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");",
													"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should be a non-empty string\");",
													"  pm.expect(responseData.surname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Surname should be a non-empty string\");",
													"  pm.expect(responseData.phone).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Phone should be a non-empty string\");",
													"  pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should be a non-empty string\");",
													"});",
													"",
													"",
													"",
													"// Verify the specific values for name, email, and role",
													"pm.test(\"Returned name matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.name).to.equal(\"TestName\");",
													"});",
													"",
													"pm.test(\"Returned surname matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.surname).to.equal(\"TestSurname\");",
													"});",
													"",
													"pm.test(\"Returned email matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.email).to.equal(\"testuser@example.com\");",
													"});",
													"",
													"pm.test(\"Returned phone matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.phone).to.equal(\"+393275307123\");",
													"});",
													"",
													"pm.test(\"Returned role matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.role).to.equal(\"PLANNER\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"me"
											]
										}
									},
									"response": [
										{
											"name": "Current user information",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"me"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"surname\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"role\": \"RESIDENT\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"me"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"me"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response body is an array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Response body is an array and contains a specific object with the specified properties and values\", function () {",
											"    var responseArray = pm.response.json();",
											"",
											"    pm.expect(responseArray).to.be.an('array').and.to.have.lengthOf.above(0);",
											"",
											"    responseArray.forEach(function (element) {",
											"        pm.expect(element).to.have.property('id').that.is.a('string');",
											"        pm.expect(element).to.have.property('name').that.is.a('string');",
											"        pm.expect(element).to.have.property('email').that.is.a('string');",
											"        pm.expect(element).to.have.property('surname').that.is.a('string');",
											"        pm.expect(element).to.have.property('role').that.is.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"At least one object in the response array has the name 'TestName' and surname 'TestSurname'\", function () {",
											"    var responseArray = pm.response.json();",
											"    var nameAndSurnameFound = responseArray.some(function (element) {",
											"        return element.name === 'TestName' && element.surname === 'TestSurname' && element.email === 'testuser@example.com' && element.role === 'PLANNER';",
											"    });",
											"    pm.expect(nameAndSurnameFound).to.be.true;",
											"});",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "List of all users",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"surname\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"role\": \"RESIDENT\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"surname\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"role\": \"DEVELOPER\"\n  }\n]"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "coordinates",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "Create Area",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - message, coordinate\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData).to.have.property('coordinate');",
													"});",
													"",
													"",
													"pm.test(\"Coordinate type is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.coordinate.type).to.be.a('string').and.to.have.length.above(0, \"Coordinate type should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Coordinates is an array with at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.coordinate.coordinates).to.be.an('array').and.to.have.lengthOf.at.least(1);",
													"});",
													"",
													"",
													"pm.test(\"Name is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.coordinate.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
													"});",
													"",
													"// Updated test to check for the presence of specific values in the response",
													"pm.test(\"Specific values are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.eql(\"Coordinate added successfully\");",
													"    pm.expect(responseData.coordinate.type).to.eql(\"Point\");",
													"    pm.expect(responseData.coordinate.coordinates).to.eql([12.4924, 41.8902]);",
													"    pm.expect(responseData.coordinate.name).to.eql(\"TestColosseo\");",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Set id of point to call that\", function () {",
													"    const responseData = pm.response.json();",
													"    const idPoint = responseData.coordinate._id;",
													"",
													"    pm.collectionVariables.set(\"idPoint\", idPoint); ",
													"    pm.environment.set(\"idPointEnv\", idPoint)",
													"",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"type\": \"Point\",\n  \"coordinates\": [\n    12.4924,\n    41.8902\n  ],\n  \"name\": \"TestColosseo\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/coordinates/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates",
												"create"
											]
										},
										"description": "### Create Coordinates\n\nThis endpoint allows you to create coordinates by making an HTTP POST request to the specified URL.\n\n#### Request Body\n\n- The request body should be in raw JSON format.\n    \n- It should include the following parameters:\n    \n    - `type` (string): The type of the coordinate, which can be either 'Point' or 'Polygon'.\n        \n    - `coordinates` (array of numbers): The array of coordinates for the point or polygon.\n        \n    - `name` (string): The name of the coordinate.\n        \n\nExample for 'Point' type:\n\n``` json\n{\n  \"type\": \"Point\",\n  \"coordinates\": [12.4924],\n  \"name\": \"Colosseo\"\n}\n\n ```\n\nExample for 'Polygon' type:\n\n``` json\n{\n  \"type\": \"Polygon\",\n  \"coordinates\": [ [ [0, 0], [0, 1], [1, 1], [1, 0], [0, 0] ] ],\n  \"name\": \"Example Polygon\"\n\n ```\n\n#### Response\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n\nThe response will include the following parameters:\n\n- `message` (string): A message regarding the operation.\n    \n- `coordinate` (object): An object containing the details of the created coordinate, including its type, coordinates, and name.\n    \n\nExample response:\n\n``` json\n{\n  \"message\": \"\",\n  \"coordinate\": {\n    \"type\": \"\",\n    \"coordinates\": [0],\n    \"name\": \"\",\n    \"_id\": \"\",\n    \"__v\": 0\n  }\n}\n\n ```"
									},
									"response": [
										{
											"name": "Coordinate added successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [12.4924,\n    41.8902], [13.4924,\n    44.8902]\n  ],\n  \"name\": \"Colosseo\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														"create"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"coordinate\": {\n    \"id\": \"<string>\",\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    \"<number>\",\n    \"<number>\"\n  ],\n  \"name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    \"<number>\",\n    \"<number>\"\n  ],\n  \"name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														"create"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create Polygon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - message, coordinate\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData).to.have.property('coordinate');",
													"});",
													"",
													"",
													"pm.test(\"Coordinate type is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.coordinate.type).to.be.a('string').and.to.have.length.above(0, \"Coordinate type should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Coordinates is an array with at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.coordinate.coordinates).to.be.an('array').and.to.have.lengthOf.at.least(1);",
													"});",
													"",
													"",
													"pm.test(\"Name is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.coordinate.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
													"});",
													"",
													"// Updated test to check for the presence of specific values in the response",
													"pm.test(\"Specific values are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.eql(\"Coordinate added successfully\");",
													"    pm.expect(responseData.coordinate.type).to.eql(\"Polygon\");",
													"    pm.expect(responseData.coordinate.coordinates).to.eql([[12.4924, 41.8902], [13.4924, 44.8902]]);",
													"    pm.expect(responseData.coordinate.name).to.eql(\"TestArea di Roma\");",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"pm.test(\"Response structure and content for type 'Polygon'\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Check if the response contains the required fields for type 'Polygon'",
													"    pm.expect(responseData.coordinate).to.have.property('type', 'Polygon');",
													"    pm.expect(responseData.coordinate).to.have.property('coordinates').that.is.an('array').and.to.have.lengthOf.at.least(1);",
													"    pm.expect(responseData.coordinate).to.have.property('name').that.is.a('string').and.to.have.lengthOf.at.least(1);",
													"",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [12.4924,\n    41.8902], [13.4924,\n    44.8902]\n  ],\n  \"name\": \"TestArea di Roma\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/coordinates/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get a coordinate by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is within acceptable range\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('_id');",
													"    pm.expect(responseData).to.have.property('type');",
													"    pm.expect(responseData).to.have.property('coordinates');",
													"    pm.expect(responseData).to.have.property('name');",
													"    pm.expect(responseData).to.have.property('__v');",
													"});",
													"",
													"",
													"pm.test(\"Validate that the _id is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should be a non-empty string\");",
													"});",
													"",
													"",
													"pm.test(\"Type is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should be a non-empty string\");",
													"});",
													"",
													"// Updated test to check for the presence of specific values in the response",
													"pm.test(\"Specific values are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.type).to.eql(\"Point\");",
													"    pm.expect(responseData.coordinates).to.eql([12.4924, 41.8902]);",
													"    pm.expect(responseData.name).to.eql(\"TestColosseo\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/coordinates/{{idPointEnv}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates",
												"{{idPointEnv}}"
											]
										}
									},
									"response": [
										{
											"name": "Coordinate found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    \"<number>\",\n    \"<number>\"\n  ],\n  \"name\": \"<string>\"\n}"
										},
										{
											"name": "Coordinate not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all coordinates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Validate the response schema for required fields - id, type, coordinates, and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    ",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item._id).to.exist;",
											"        pm.expect(item.type).to.exist;",
											"        pm.expect(item.coordinates).to.exist;",
											"        pm.expect(item.name).to.exist;",
											"    });",
											"});",
											"",
											"",
											"",
											"pm.test(\"Coordinates is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item.coordinates).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"    });",
											"});",
											"",
											"var template = `",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"<script src=\"https://unpkg.com/topojson@3\"></script>",
											"<style>",
											"body { ",
											"    background-color: white;",
											"}",
											".title { ",
											"    font-size: 30px;",
											"    font-family: \"Roboto\", sans-serif;",
											"    text-align: center;",
											"}",
											".container {",
											"    display: flex;",
											"    flex-direction: row;",
											"    justify-content: center;",
											"    align-items: center;",
											"}",
											".directions {",
											"    font-size: 18px;",
											"    font-family: \"Roboto\", sans-serif;",
											"    padding-left: 20px;",
											"}",
											"#backgroundRectangle {",
											"    width: 100%;",
											"    height: 100%;",
											"    fill: #f5f5f5;",
											"}",
											".projectionOutline {",
											"    fill: #2f434a;",
											"    stroke: #4e5f66;",
											"}",
											".tooltip {",
											"    position: absolute;",
											"    font-size: 12px;",
											"    width: auto;",
											"    height: auto;",
											"    pointer-events: none;",
											"    background-color: white;",
											"    padding: 3px;",
											"}",
											"</style>",
											"<h1 class=\"title\"></h1>",
											"<div class=\"container\">",
											"    <div id=\"map\"></div>",
											"    <p class=\"directions\">Draw mouse to zoom in onto section. Double click to zoom out</p>",
											"</div>",
											"<script>",
											"",
											"    pm.getData(function(err, value) {",
											"        if (err) {",
											"            console.error(\"Error fetching data:\", err);",
											"            return;",
											"        }",
											"        d3.select(\".title\").html(value.title);",
											"        initVisualization(value.data);",
											"    });",
											"",
											"    async function initVisualization(pmInput) {",
											"        const response = await fetch(\"https://unpkg.com/world-atlas@1.1.4/world/110m.json\");",
											"        const mapData = await response.json();",
											"        generateVisualization(pmInput, mapData);",
											"    }",
											"",
											"    function generateVisualization(pmInput, mapData) {",
											"        const margins = {top: 20, left: 10, right: 20, bottom: 20};",
											"        const width = 800 - margins.top - margins.bottom;",
											"        const height = 500 - margins.left - margins.right;",
											"",
											"        const zoom = d3.zoom()",
											"            .scaleExtent([1, 40])",
											"            .translateExtent([[0, 0], [width + margins.left + margins.right, height + margins.top + margins.bottom]])",
											"            .extent([[0, 0], [width + margins.left + margins.right, height + margins.top + margins.bottom]])",
											"            .on(\"zoom\", () => {",
											"                d3.select(\"#map-group\").attr(\"transform\", d3.event.transform);",
											"            });",
											"",
											"        let brush = d3.brush()",
											"            .extent([[0, 0], [width + margins.left + margins.right, height + margins.top + margins.bottom]])",
											"            .on(\"end\", () => {",
											"                let extent = d3.event.selection;",
											"                if (extent) {",
											"                    d3.select(\"#map-group\").call(brush.move, null);",
											"                    d3.select(\"#map-group\").transition().duration(1500).call(zoom.transform, d3.zoomIdentity",
											"                        .scale((width + margins.left + margins.right) / (extent[1][0] - extent[0][0]))",
											"                        .translate(-extent[0][0], -extent[0][1]));",
											"                } else {",
											"                    d3.select(\"#map-group\").transition().duration(1500).call(zoom.transform, d3.zoomIdentity.scale(1).translate(0, 0));",
											"                }",
											"            });",
											"",
											"        let svg = d3.select(\"#map\")",
											"            .append(\"svg\")",
											"            .attr(\"width\", width + margins.left + margins.right)",
											"            .attr(\"height\", height + margins.top + margins.bottom);",
											"",
											"        svg.append(\"rect\").attr(\"id\", \"backgroundRectangle\");",
											"",
											"        svg = svg.append(\"g\")",
											"            .attr(\"id\", \"map-group\")",
											"            .call(brush);",
											"",
											"        let projection = d3.geoMercator().translate([400, 350]).scale(125);",
											"        let mapGroup = svg.append(\"g\");",
											"        let mapPath = d3.geoPath().projection(projection);",
											"        ",
											"        mapGroup.selectAll(\"path\")",
											"            .data(topojson.feature(mapData, mapData.objects.countries).features)",
											"            .enter()",
											"            .append(\"path\")",
											"            .attr(\"d\", mapPath)",
											"            .attr(\"class\", \"projectionOutline\");",
											"",
											"        // Tooltip setup",
											"        const rect = document.getElementById(\"map\").getBoundingClientRect();",
											"        const offset = {top: rect.top, left: rect.left};",
											"        let tooltip = d3.select(\"#map\").append(\"div\").attr(\"class\", \"tooltip\");",
											"",
											"        let tipMouseover = function(d) {",
											"            tooltip.html(\"Longitude: <b>\" + d.long + \"</b><br/>Latitude: <b>\" + d.lat + \"</b>\")",
											"                .style(\"left\", (d3.event.pageX + 15 - offset.left) + \"px\")",
											"                .style(\"top\", (d3.event.pageY - 20 - offset.top) + \"px\")",
											"                .transition().duration(200).style(\"opacity\", 0.9);",
											"            d3.select(this).style(\"stroke\", \"white\").style(\"opacity\", 1);",
											"        };",
											"",
											"        let tipMouseout = function(d) {",
											"            tooltip.transition().duration(300).style(\"opacity\", 0);",
											"            d3.select(this).style(\"stroke\", \"none\").style(\"opacity\", 0.6);",
											"        };",
											"",
											"        svg.selectAll(\"circle\")",
											"            .data(pmInput)",
											"            .enter()",
											"            .append(\"circle\")",
											"            .attr(\"r\", 0)",
											"            .style(\"fill\", d => d.color)",
											"            .attr(\"cx\", d => projection([d.long, d.lat])[0])",
											"            .attr(\"cy\", d => projection([d.long, d.lat])[1])",
											"            .style(\"opacity\", 0.6)",
											"            .on(\"mouseover\", tipMouseover)",
											"            .on(\"mouseout\", tipMouseout)",
											"            .transition(d3.transition().duration(1000).ease(d3.easeQuadOut))",
											"            .attr(\"r\", d => d.circleSize);",
											"    }",
											"</script>",
											"`;",
											"",
											"// Parsing la risposta",
											"var response = pm.response.json();",
											"let parsedData = [];",
											"",
											"// Controllo se la risposta è valida",
											"if (!response || !Array.isArray(response)) {",
											"    console.error(\"La risposta non è valida:\", response);",
											"    return; // Interrompi l'esecuzione se la risposta non è valida",
											"}",
											"",
											"// Parsing dei dati dai tuoi coordinate",
											"let coord = response; // Usa direttamente il tuo array di coordinate",
											"for (let item of coord) {",
											"    let tempEntry = {};",
											"    tempEntry.lat = item.coordinates[1];",
											"    tempEntry.long = item.coordinates[0];",
											"    tempEntry.circleSize = 1; // Dimensione del cerchio, modifica come necessario",
											"    tempEntry.color = \"#F09D51\"; // Colore del cerchio, modifica come necessario",
											"    parsedData.push(tempEntry);",
											"}",
											"",
											"// Imposta il visualizzatore con i dati",
											"pm.visualizer.set(template, {",
											"    data: parsedData,",
											"    title: \"Map of Coordinates\"",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/coordinates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"coordinates"
									]
								}
							},
							"response": [
								{
									"name": "List of all coordinates",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/coordinates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n]"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/coordinates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "documents",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "Add a new document (without connection)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Controlla che lo stato della risposta sia 200",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// Verifica che la risposta sia in formato JSON",
													"pm.test(\"Response is in JSON format\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Verifica il contenuto della risposta",
													"pm.test(\"Verify response structure and values\", function () {",
													"    const response = pm.response.json();",
													"",
													"    // Controlla il messaggio di successo",
													"    pm.expect(response.message).to.eql(\"Document added successfully\");",
													"",
													"    // Verifica che l'oggetto 'document' esista e contenga i campi previsti",
													"    pm.expect(response.document).to.be.an(\"object\");",
													"    pm.expect(response.document.title).to.eql(\"TestDoc\");",
													"    pm.expect(response.document.stakeholders).to.eql(\"TestStak\");",
													"    pm.expect(response.document.scale).to.eql(\"1:1000\");",
													"    pm.expect(response.document.type).to.eql(\"CONFLICT\");",
													"    pm.expect(response.document.date).to.eql(\"05-11-2024\");",
													"    pm.expect(response.document.language).to.eql(\"it\");",
													"",
													"    // Verifica che il campo media sia un array vuoto",
													"    pm.expect(response.document.media).to.be.an(\"array\").that.is.empty;",
													"",
													"    const idPoint = pm.environment.get(\"idPointEnv\");",
													"",
													"    // Verifica la struttura delle coordinate",
													"    pm.expect(response.document.coordinates).to.be.an(\"object\");",
													"    pm.expect(response.document.coordinates._id).to.eql(idPoint);",
													"    pm.expect(response.document.coordinates.type).to.eql(\"Point\");",
													"    pm.expect(response.document.coordinates.coordinates).to.be.an(\"array\").with.lengthOf(2);",
													"    pm.expect(response.document.coordinates.coordinates[0]).to.eql(12.4924);",
													"    pm.expect(response.document.coordinates.coordinates[1]).to.eql(41.8902);",
													"    pm.expect(response.document.coordinates.name).to.eql(\"TestColosseo\");",
													"    pm.expect(response.document.coordinates.__v).to.eql(0);",
													"",
													"    // Verifica che il campo summary corrisponda al valore atteso",
													"    pm.expect(response.document.summary).to.eql(\"TestSummary\");",
													"",
													"    // Verifica che il campo connections sia un array vuoto",
													"    pm.expect(response.document.connections).to.be.an(\"array\").that.is.empty;",
													"});",
													"",
													"",
													"pm.test(\"Set id of document to call that\", function () {",
													"    const responseData = pm.response.json();",
													"    const idDocument = responseData.document.id;",
													"",
													"    pm.collectionVariables.set(\"idDocument\", idDocument); ",
													"    pm.environment.set(\"idDocumentEnv\", idDocument)",
													"",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": \"TestStak\",\n  \"scale\": \"1:1000\",\n  \"type\": \"CONFLICT\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"05-11-2024\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/documents/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												"create"
											]
										}
									},
									"response": [
										{
											"name": "Document added successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
										}
									]
								},
								{
									"name": "Add a new document (with connection)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Controlla che lo stato della risposta sia 200",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// Verifica che la risposta sia in formato JSON",
													"pm.test(\"Response is in JSON format\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Verifica il contenuto della risposta",
													"pm.test(\"Verify response structure and values\", function () {",
													"    const response = pm.response.json();",
													"",
													"    // Controlla il messaggio di successo",
													"    pm.expect(response.message).to.eql(\"Document added successfully\");",
													"",
													"    // Verifica che l'oggetto 'document' esista e contenga i campi previsti",
													"    pm.expect(response.document).to.be.an(\"object\");",
													"    pm.expect(response.document.title).to.eql(\"TestDoc\");",
													"    pm.expect(response.document.stakeholders).to.eql(\"TestStak\");",
													"    pm.expect(response.document.scale).to.eql(\"1:1000\");",
													"    pm.expect(response.document.type).to.eql(\"CONFLICT\");",
													"    pm.expect(response.document.date).to.eql(\"05-11-2024\");",
													"    pm.expect(response.document.language).to.eql(\"it\");",
													"",
													"    // Verifica che il campo media sia un array vuoto",
													"    pm.expect(response.document.media).to.be.an(\"array\").that.is.empty;",
													"",
													"    const idPoint = pm.environment.get(\"idPointEnv\");",
													"",
													"    // Verifica la struttura delle coordinate",
													"    pm.expect(response.document.coordinates).to.be.an(\"object\");",
													"    pm.expect(response.document.coordinates._id).to.eql(idPoint);",
													"    pm.expect(response.document.coordinates.type).to.eql(\"Point\");",
													"    pm.expect(response.document.coordinates.coordinates).to.be.an(\"array\").with.lengthOf(2);",
													"    pm.expect(response.document.coordinates.coordinates[0]).to.eql(12.4924);",
													"    pm.expect(response.document.coordinates.coordinates[1]).to.eql(41.8902);",
													"    pm.expect(response.document.coordinates.name).to.eql(\"TestColosseo\");",
													"    pm.expect(response.document.coordinates.__v).to.eql(0);",
													"",
													"    // Verifica che il campo summary corrisponda al valore atteso",
													"    pm.expect(response.document.summary).to.eql(\"TestSummary\");",
													"",
													"    const idDoc = pm.environment.get(\"idDocumentEnv\");",
													"",
													"    // Verifica la struttura del campo connections",
													"    pm.expect(response.document.connections).to.be.an(\"array\").with.lengthOf(1);",
													"    pm.expect(response.document.connections[0]).to.be.an(\"object\");",
													"    pm.expect(response.document.connections[0].document).to.eql(idDoc);",
													"    pm.expect(response.document.connections[0].type).to.eql(\"LINK1\");",
													"});",
													"",
													"pm.test(\"Set id of document to call that\", function () {",
													"    const responseData = pm.response.json();",
													"    const idDocument = responseData.document.id;",
													"",
													"    pm.collectionVariables.set(\"idDocument2\", idDocument); ",
													"    pm.environment.set(\"idDocumentEnv2\", idDocument)",
													"",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n  \"title\": \"TestDoc\",\n  \"stakeholders\": \"TestStak\",\n  \"scale\": \"1:1000\",\n  \"type\": \"CONFLICT\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"05-11-2024\",\n  \"coordinates\": \"{{idPointEnv}}\",\n  \"connections\": [\n    {\n      \"document\": \"{{idDocumentEnv}}\",\n      \"type\": \"LINK1\"\n    }\n    \n  ]\n  \n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/documents/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												"create"
											]
										}
									},
									"response": [
										{
											"name": "Document added successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "get {id}",
							"item": [
								{
									"name": "Check Connection Created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Controlla che lo stato della risposta sia 200",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Verifica che la risposta sia in formato JSON",
													"pm.test(\"Response is in JSON format\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Verifica il contenuto della risposta",
													"pm.test(\"Verify response structure and values\", function () {",
													"    const response = pm.response.json();",
													"",
													"    const idDoc = pm.environment.get(\"idDocumentEnv\");",
													"",
													"    // Verifica che l'oggetto 'document' contenga i campi previsti",
													"    pm.expect(response.id).to.eql(idDoc);",
													"    pm.expect(response.title).to.eql(\"TestDoc\");",
													"    pm.expect(response.stakeholders).to.eql(\"TestStak\");",
													"    pm.expect(response.scale).to.eql(\"1:1000\");",
													"    pm.expect(response.type).to.eql(\"CONFLICT\");",
													"    pm.expect(response.date).to.eql(\"05-11-2024\");",
													"    pm.expect(response.language).to.eql(\"it\");",
													"",
													"    // Verifica che il campo media sia un array vuoto",
													"    pm.expect(response.media).to.be.an(\"array\").that.is.empty;",
													"",
													"    const idPoint = pm.environment.get(\"idPointEnv\");",
													"",
													"    // Verifica la struttura delle coordinate",
													"    pm.expect(response.coordinates).to.be.an(\"object\");",
													"    pm.expect(response.coordinates._id).to.eql(idPoint);",
													"    pm.expect(response.coordinates.type).to.eql(\"Point\");",
													"    pm.expect(response.coordinates.coordinates).to.be.an(\"array\").with.lengthOf(2);",
													"    pm.expect(response.coordinates.coordinates[0]).to.eql(12.4924);",
													"    pm.expect(response.coordinates.coordinates[1]).to.eql(41.8902);",
													"    pm.expect(response.coordinates.name).to.eql(\"TestColosseo\");",
													"    pm.expect(response.coordinates.__v).to.eql(0);",
													"",
													"    // Verifica che il campo summary corrisponda al valore atteso",
													"    pm.expect(response.summary).to.eql(\"TestSummary\");",
													"",
													"    // Verifica che ci sia almeno una connessione con 'document' uguale alla variabile di ambiente 'idDoc2'",
													"    const idDoc2 = pm.environment.get(\"idDocumentEnv2\");",
													"    const connectionMatch = response.connections.some(connection => connection.document === idDoc2);",
													"",
													"    pm.test(\"Connections array contains at least one document equal to idDoc2\", function () {",
													"        pm.expect(connectionMatch).to.be.true;",
													"    });",
													"",
													"    // Verifica che tutti i campi 'type' nelle connessioni siano impostati su 'LINK1'",
													"    const allLinksAreLink1 = response.connections.every(connection => connection.type === \"LINK1\");",
													"",
													"    pm.test(\"All connections have type 'LINK1'\", function () {",
													"        pm.expect(allLinksAreLink1).to.be.true;",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/documents/{{idDocumentEnv}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												"{{idDocumentEnv}}"
											]
										}
									},
									"response": [
										{
											"name": "Document data",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/documents/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}"
										},
										{
											"name": "Document not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/documents/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "put {id}",
							"item": [
								{
									"name": "Update a document by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Controlla che lo stato della risposta sia 200",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Verifica che la risposta sia in formato JSON",
													"pm.test(\"Response is in JSON format\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Verifica il contenuto della risposta",
													"pm.test(\"Verify response structure and values\", function () {",
													"    const response = pm.response.json();",
													"",
													"    const idDoc = pm.environment.get(\"idDocumentEnv\");",
													"",
													"    // Verifica che l'oggetto 'document' contenga i campi previsti",
													"    pm.expect(response.id).to.eql(idDoc);",
													"    pm.expect(response.title).to.eql(\"TestDoc\");",
													"    pm.expect(response.stakeholders).to.eql(\"TestStak2\");",
													"    pm.expect(response.scale).to.eql(\"1:1000\");",
													"    pm.expect(response.type).to.eql(\"CONFLICT\");",
													"    pm.expect(response.date).to.eql(\"05-11-2024\");",
													"    pm.expect(response.language).to.eql(\"it\");",
													"",
													"    // Verifica che il campo media sia un array vuoto",
													"    pm.expect(response.media).to.be.an(\"array\").that.is.empty;",
													"",
													"    const idPoint = pm.environment.get(\"idPointEnv\");",
													"",
													"    // Verifica la struttura delle coordinate",
													"    pm.expect(response.coordinates).to.be.an(\"object\");",
													"    pm.expect(response.coordinates._id).to.eql(idPoint);",
													"    pm.expect(response.coordinates.type).to.eql(\"Point\");",
													"    pm.expect(response.coordinates.coordinates).to.be.an(\"array\").with.lengthOf(2);",
													"    pm.expect(response.coordinates.coordinates[0]).to.eql(12.4924);",
													"    pm.expect(response.coordinates.coordinates[1]).to.eql(41.8902);",
													"    pm.expect(response.coordinates.name).to.eql(\"TestColosseo\");",
													"    pm.expect(response.coordinates.__v).to.eql(0);",
													"",
													"    // Verifica che il campo summary corrisponda al valore atteso",
													"    pm.expect(response.summary).to.eql(\"TestSummary\");",
													"",
													"    // Verifica che ci sia almeno una connessione con 'document' uguale alla variabile di ambiente 'idDoc2'",
													"    const idDoc2 = pm.environment.get(\"idDocumentEnv2\");",
													"    const connectionMatch = response.connections.some(connection => connection.document === idDoc2);",
													"",
													"    pm.test(\"Connections array contains at least one document equal to idDoc2\", function () {",
													"        pm.expect(connectionMatch).to.be.true;",
													"    });",
													"",
													"    // Verifica che tutti i campi 'type' nelle connessioni siano impostati su 'LINK1'",
													"    const allLinksAreLink1 = response.connections.every(connection => connection.type === \"LINK1\");",
													"",
													"    pm.test(\"All connections have type 'LINK1'\", function () {",
													"        pm.expect(allLinksAreLink1).to.be.true;",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"stakeholders\": \"TestStak2\"\n  \n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/documents/{{idDocumentEnv}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												"{{idDocumentEnv}}"
											]
										}
									},
									"response": [
										{
											"name": "Document updated successfully",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}"
										},
										{
											"name": "Document not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Estrai la risposta JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Estrai le variabili d'ambiente",
											"const idDoc1 = pm.environment.get(\"idDocumentEnv\");",
											"const idDoc2 = pm.environment.get(\"idDocumentEnv2\");",
											"",
											"// Test codice di stato della risposta",
											"pm.test(\"Codice di stato è 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test tempo di risposta",
											"pm.test(\"Tempo di risposta inferiore a 500 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"// Controlla che l'array contenga almeno due valori",
											"pm.test(\"La risposta contiene almeno due documenti\", function () {",
											"    pm.expect(jsonResponse).to.be.an(\"array\");",
											"    pm.expect(jsonResponse.length).to.be.at.least(2);",
											"});",
											"",
											"// Verifica che l'array contenga documenti con gli ID specificati",
											"pm.test(\"L'array contiene i documenti con idDoc1 e idDoc2\", function () {",
											"    const docIds = jsonResponse.map(doc => doc.id);",
											"    pm.expect(docIds).to.include(idDoc1);",
											"    pm.expect(docIds).to.include(idDoc2);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/documents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"documents"
									]
								}
							},
							"response": [
								{
									"name": "List of all documents",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/documents",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"INFORMATIVE_DOC\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Polygon\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  },\n  {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"PRESCRIPTIVE_DOC\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK3\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Polygon\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "clean",
					"item": [
						{
							"name": "logout",
							"item": [
								{
									"name": "Logout a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response has a 'message' field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Message field is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"logout"
											]
										}
									},
									"response": [
										{
											"name": "User logged out successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"logout"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"logout"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "DeleteCoordinate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field 'message'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response schema matches the expected schema\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/coordinates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"coordinates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"pm.test(\"Response is not null\", function () {",
											"    pm.expect(pm.response.text()).to.not.be.null;",
											"});",
											"",
											"",
											"pm.test(\"Response follows the expected schema for user data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"pm.test(\"Response is not null\", function () {",
											"    pm.expect(pm.response.text()).to.not.be.null;",
											"});",
											"",
											"",
											"pm.test(\"Response follows the expected schema for user data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/documents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"documents"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "auth-token",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5001"
		},
		{
			"key": "idPoint",
			"value": "",
			"type": "string"
		},
		{
			"key": "idDocument",
			"value": ""
		},
		{
			"key": "idDocument2",
			"value": ""
		}
	]
}