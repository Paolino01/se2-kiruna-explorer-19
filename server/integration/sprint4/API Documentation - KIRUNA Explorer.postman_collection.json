{
	"info": {
		"_postman_id": "47d6cced-7270-453f-9cfa-1154529d8c5d",
		"name": "API Documentation - KIRUNA Explorer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23447628"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "signup",
							"item": [
								{
									"name": "Create a new user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"Response time is within an acceptable range\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Response is not null\", function () {",
													"    pm.expect(pm.response.text()).to.not.be.null;",
													"});",
													"",
													"",
													"pm.test(\"Response follows the expected schema for user data\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.a('string');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"TestName\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"surname\": \"TestSurname\",\n  \"phone\": \"+393275307123\",\n  \"role\": \"PLANNER\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"signup"
											]
										}
									},
									"response": [
										{
											"name": "User created successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"surname\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"role\": \"DEVELOPER\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/signup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"signup"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"surname\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"role\": \"DEVELOPER\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/signup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"signup"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"surname\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"role\": \"DEVELOPER\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/signup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"signup"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "Wrong Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Unauthorized status code\", function () {",
													"    pm.response.to.have.status(403); ",
													"});",
													"",
													"// Test for the specific error message",
													"pm.test(\"Error message for incorrect email\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"message\", \"The user is not authorized\");",
													"});",
													"",
													"// Test to ensure the 'errors' array is empty",
													"pm.test(\"The 'errors' array is empty\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse.errors).to.be.an(\"array\").that.is.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"testuser2@example.com\",\n  \"password\": \"SecurePassword123!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "User logged in successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  {\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Wrong Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Unauthorized status code\", function () {",
													"    pm.response.to.have.status(403); ",
													"});",
													"",
													"// Test for the specific error message",
													"pm.test(\"Error message for incorrect email\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"message\", \"The user is not authorized\");",
													"});",
													"",
													"// Test to ensure the 'errors' array is empty",
													"pm.test(\"The 'errors' array is empty\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse.errors).to.be.an(\"array\").that.is.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword1234!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "User logged in successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  {\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Wrong Input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Unauthorized status code\", function () {",
													"    pm.response.to.have.status(403); ",
													"});",
													"",
													"// Test for the specific error message",
													"pm.test(\"Error message for incorrect email\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"message\", \"The user is not authorized\");",
													"});",
													"",
													"// Test to ensure the 'errors' array is empty",
													"pm.test(\"The 'errors' array is empty\", function () {",
													"    const jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse.errors).to.be.an(\"array\").that.is.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword1234!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "User logged in successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  {\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Login a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response has the required field 'token'\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('token');",
													"});",
													"",
													"",
													"pm.test(\"Token is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Token is a valid JWT token\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.token).to.be.a('string');",
													"    pm.expect(responseData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
													"});",
													"",
													"// Test to check if the JWT token is set as a cookie",
													"pm.test(\"JWT token is set as a cookie\", function () {",
													"    const cookieValue = pm.response.headers.get('Set-Cookie');",
													"    pm.expect(cookieValue).to.include('auth-token');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "User logged in successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  {\n  \"email\": \"testuser@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "me",
							"item": [
								{
									"name": "Get current user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test the response body structure and values",
													"pm.test(\"Response body structure is valid\", function () {",
													"    var responseJSON = pm.response.json();",
													"    pm.expect(responseJSON).to.be.an('object');",
													"",
													"    // Checking for the required properties",
													"    pm.expect(responseJSON).to.have.property('name');",
													"    pm.expect(responseJSON).to.have.property('email');",
													"    pm.expect(responseJSON).to.have.property('surname');",
													"    pm.expect(responseJSON).to.have.property('phone');",
													"    pm.expect(responseJSON).to.have.property('role');",
													"",
													"    // Checking the data types of the properties",
													"    pm.expect(responseJSON.id).to.be.a('string');",
													"    pm.expect(responseJSON.name).to.be.a('string');",
													"    pm.expect(responseJSON.email).to.be.a('string');",
													"    pm.expect(responseJSON.surname).to.be.a('string');",
													"    pm.expect(responseJSON.phone).to.be.a('string');",
													"    pm.expect(responseJSON.role).to.be.a('string');",
													"});",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"All required properties are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('name');",
													"    pm.expect(responseData).to.have.property('email');",
													"    pm.expect(responseData).to.have.property('surname');",
													"    pm.expect(responseData).to.have.property('phone');",
													"    pm.expect(responseData).to.have.property('role');",
													"});",
													"",
													"",
													"pm.test(\"Id, name, email, surname, phone, and role properties are non-empty strings\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
													"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");",
													"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should be a non-empty string\");",
													"  pm.expect(responseData.surname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Surname should be a non-empty string\");",
													"  pm.expect(responseData.phone).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Phone should be a non-empty string\");",
													"  pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should be a non-empty string\");",
													"});",
													"",
													"",
													"",
													"// Verify the specific values for name, email, and role",
													"pm.test(\"Returned name matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.name).to.equal(\"TestName\");",
													"});",
													"",
													"pm.test(\"Returned surname matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.surname).to.equal(\"TestSurname\");",
													"});",
													"",
													"pm.test(\"Returned email matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.email).to.equal(\"testuser@example.com\");",
													"});",
													"",
													"pm.test(\"Returned phone matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.phone).to.equal(\"+393275307123\");",
													"});",
													"",
													"pm.test(\"Returned role matches the specified value\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.role).to.equal(\"PLANNER\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"me"
											]
										}
									},
									"response": [
										{
											"name": "Current user information",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"me"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"surname\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"role\": \"RESIDENT\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"me"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"me"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response body is an array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Response body is an array and contains a specific object with the specified properties and values\", function () {",
											"    var responseArray = pm.response.json();",
											"",
											"    pm.expect(responseArray).to.be.an('array').and.to.have.lengthOf.above(0);",
											"",
											"    responseArray.forEach(function (element) {",
											"        pm.expect(element).to.have.property('id').that.is.a('string');",
											"        pm.expect(element).to.have.property('name').that.is.a('string');",
											"        pm.expect(element).to.have.property('email').that.is.a('string');",
											"        pm.expect(element).to.have.property('surname').that.is.a('string');",
											"        pm.expect(element).to.have.property('role').that.is.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"At least one object in the response array has the name 'TestName' and surname 'TestSurname'\", function () {",
											"    var responseArray = pm.response.json();",
											"    var nameAndSurnameFound = responseArray.some(function (element) {",
											"        return element.name === 'TestName' && element.surname === 'TestSurname' && element.email === 'testuser@example.com' && element.role === 'PLANNER';",
											"    });",
											"    pm.expect(nameAndSurnameFound).to.be.true;",
											"});",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "List of all users",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"surname\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"role\": \"RESIDENT\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"surname\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"role\": \"DEVELOPER\"\n  }\n]"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "coordinates",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "Create Point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - message, coordinate\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData).to.have.property('coordinate');",
													"});",
													"",
													"",
													"pm.test(\"Coordinate type is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.coordinate.type).to.be.a('string').and.to.have.length.above(0, \"Coordinate type should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Coordinates is an array with at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.coordinate.coordinates).to.be.an('array').and.to.have.lengthOf.at.least(1);",
													"});",
													"",
													"",
													"pm.test(\"Name is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.coordinate.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
													"});",
													"",
													"// Updated test to check for the presence of specific values in the response",
													"pm.test(\"Specific values are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.eql(\"Coordinate added successfully\");",
													"    pm.expect(responseData.coordinate.type).to.eql(\"Point\");",
													"    pm.expect(responseData.coordinate.coordinates).to.eql([12.4924, 41.8902]);",
													"    pm.expect(responseData.coordinate.name).to.eql(\"TestColosseo\");",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Set id of point to call that\", function () {",
													"    const responseData = pm.response.json();",
													"    const idPoint = responseData.coordinate._id;",
													"",
													"    pm.collectionVariables.set(\"idPoint\", idPoint); ",
													"    pm.environment.set(\"idPointEnv\", idPoint)",
													"",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"type\": \"Point\",\n  \"coordinates\": [\n    12.4924,\n    41.8902\n  ],\n  \"name\": \"TestColosseo\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/coordinates/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates",
												"create"
											]
										},
										"description": "### Create Coordinates\n\nThis endpoint allows you to create coordinates by making an HTTP POST request to the specified URL.\n\n#### Request Body\n\n- The request body should be in raw JSON format.\n    \n- It should include the following parameters:\n    \n    - `type` (string): The type of the coordinate, which can be either 'Point' or 'Polygon'.\n        \n    - `coordinates` (array of numbers): The array of coordinates for the point or polygon.\n        \n    - `name` (string): The name of the coordinate.\n        \n\nExample for 'Point' type:\n\n``` json\n{\n  \"type\": \"Point\",\n  \"coordinates\": [12.4924],\n  \"name\": \"Colosseo\"\n}\n\n ```\n\nExample for 'Polygon' type:\n\n``` json\n{\n  \"type\": \"Polygon\",\n  \"coordinates\": [ [ [0, 0], [0, 1], [1, 1], [1, 0], [0, 0] ] ],\n  \"name\": \"Example Polygon\"\n\n ```\n\n#### Response\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n\nThe response will include the following parameters:\n\n- `message` (string): A message regarding the operation.\n    \n- `coordinate` (object): An object containing the details of the created coordinate, including its type, coordinates, and name.\n    \n\nExample response:\n\n``` json\n{\n  \"message\": \"\",\n  \"coordinate\": {\n    \"type\": \"\",\n    \"coordinates\": [0],\n    \"name\": \"\",\n    \"_id\": \"\",\n    \"__v\": 0\n  }\n}\n\n ```"
									},
									"response": [
										{
											"name": "Coordinate added successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [12.4924,\n    41.8902], [13.4924,\n    44.8902]\n  ],\n  \"name\": \"Colosseo\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														"create"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"coordinate\": {\n    \"id\": \"<string>\",\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    \"<number>\",\n    \"<number>\"\n  ],\n  \"name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    \"<number>\",\n    \"<number>\"\n  ],\n  \"name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														"create"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create Polygon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - message, coordinate\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData).to.have.property('coordinate');",
													"});",
													"",
													"",
													"pm.test(\"Coordinate type is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.coordinate.type).to.be.a('string').and.to.have.length.above(0, \"Coordinate type should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Coordinates is an array with at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.coordinate.coordinates).to.be.an('array').and.to.have.lengthOf.at.least(1);",
													"});",
													"",
													"",
													"pm.test(\"Name is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.coordinate.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
													"});",
													"",
													"// Updated test to check for the presence of specific values in the response",
													"pm.test(\"Specific values are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.eql(\"Coordinate added successfully\");",
													"    pm.expect(responseData.coordinate.type).to.eql(\"Polygon\");",
													"    pm.expect(responseData.coordinate.coordinates).to.eql([[12.4924, 41.8902], [13.4924, 44.8902]]);",
													"    pm.expect(responseData.coordinate.name).to.eql(\"TestArea di Roma\");",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"pm.test(\"Response structure and content for type 'Polygon'\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Check if the response contains the required fields for type 'Polygon'",
													"    pm.expect(responseData.coordinate).to.have.property('type', 'Polygon');",
													"    pm.expect(responseData.coordinate).to.have.property('coordinates').that.is.an('array').and.to.have.lengthOf.at.least(1);",
													"    pm.expect(responseData.coordinate).to.have.property('name').that.is.a('string').and.to.have.lengthOf.at.least(1);",
													"",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [12.4924,\n    41.8902], [13.4924,\n    44.8902]\n  ],\n  \"name\": \"TestArea di Roma\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/coordinates/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get a coordinate by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is within acceptable range\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('_id');",
													"    pm.expect(responseData).to.have.property('type');",
													"    pm.expect(responseData).to.have.property('coordinates');",
													"    pm.expect(responseData).to.have.property('name');",
													"    pm.expect(responseData).to.have.property('__v');",
													"});",
													"",
													"",
													"pm.test(\"Validate that the _id is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should be a non-empty string\");",
													"});",
													"",
													"",
													"pm.test(\"Type is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should be a non-empty string\");",
													"});",
													"",
													"// Updated test to check for the presence of specific values in the response",
													"pm.test(\"Specific values are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.type).to.eql(\"Point\");",
													"    pm.expect(responseData.coordinates).to.eql([12.4924, 41.8902]);",
													"    pm.expect(responseData.name).to.eql(\"TestColosseo\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/coordinates/{{idPointEnv}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates",
												"{{idPointEnv}}"
											]
										}
									},
									"response": [
										{
											"name": "Coordinate found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    \"<number>\",\n    \"<number>\"\n  ],\n  \"name\": \"<string>\"\n}"
										},
										{
											"name": "Coordinate not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/coordinates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"coordinates",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all coordinates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Validate the response schema for required fields - id, type, coordinates, and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    ",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item._id).to.exist;",
											"        pm.expect(item.type).to.exist;",
											"        pm.expect(item.coordinates).to.exist;",
											"        pm.expect(item.name).to.exist;",
											"    });",
											"});",
											"",
											"",
											"",
											"pm.test(\"Coordinates is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item.coordinates).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"    });",
											"});",
											"",
											"var template = `",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"<script src=\"https://unpkg.com/topojson@3\"></script>",
											"<style>",
											"body { ",
											"    background-color: white;",
											"}",
											".title { ",
											"    font-size: 30px;",
											"    font-family: \"Roboto\", sans-serif;",
											"    text-align: center;",
											"}",
											".container {",
											"    display: flex;",
											"    flex-direction: row;",
											"    justify-content: center;",
											"    align-items: center;",
											"}",
											".directions {",
											"    font-size: 18px;",
											"    font-family: \"Roboto\", sans-serif;",
											"    padding-left: 20px;",
											"}",
											"#backgroundRectangle {",
											"    width: 100%;",
											"    height: 100%;",
											"    fill: #f5f5f5;",
											"}",
											".projectionOutline {",
											"    fill: #2f434a;",
											"    stroke: #4e5f66;",
											"}",
											".tooltip {",
											"    position: absolute;",
											"    font-size: 12px;",
											"    width: auto;",
											"    height: auto;",
											"    pointer-events: none;",
											"    background-color: white;",
											"    padding: 3px;",
											"}",
											"</style>",
											"<h1 class=\"title\"></h1>",
											"<div class=\"container\">",
											"    <div id=\"map\"></div>",
											"    <p class=\"directions\">Draw mouse to zoom in onto section. Double click to zoom out</p>",
											"</div>",
											"<script>",
											"",
											"    pm.getData(function(err, value) {",
											"        if (err) {",
											"            console.error(\"Error fetching data:\", err);",
											"            return;",
											"        }",
											"        d3.select(\".title\").html(value.title);",
											"        initVisualization(value.data);",
											"    });",
											"",
											"    async function initVisualization(pmInput) {",
											"        const response = await fetch(\"https://unpkg.com/world-atlas@1.1.4/world/110m.json\");",
											"        const mapData = await response.json();",
											"        generateVisualization(pmInput, mapData);",
											"    }",
											"",
											"    function generateVisualization(pmInput, mapData) {",
											"        const margins = {top: 20, left: 10, right: 20, bottom: 20};",
											"        const width = 800 - margins.top - margins.bottom;",
											"        const height = 500 - margins.left - margins.right;",
											"",
											"        const zoom = d3.zoom()",
											"            .scaleExtent([1, 40])",
											"            .translateExtent([[0, 0], [width + margins.left + margins.right, height + margins.top + margins.bottom]])",
											"            .extent([[0, 0], [width + margins.left + margins.right, height + margins.top + margins.bottom]])",
											"            .on(\"zoom\", () => {",
											"                d3.select(\"#map-group\").attr(\"transform\", d3.event.transform);",
											"            });",
											"",
											"        let brush = d3.brush()",
											"            .extent([[0, 0], [width + margins.left + margins.right, height + margins.top + margins.bottom]])",
											"            .on(\"end\", () => {",
											"                let extent = d3.event.selection;",
											"                if (extent) {",
											"                    d3.select(\"#map-group\").call(brush.move, null);",
											"                    d3.select(\"#map-group\").transition().duration(1500).call(zoom.transform, d3.zoomIdentity",
											"                        .scale((width + margins.left + margins.right) / (extent[1][0] - extent[0][0]))",
											"                        .translate(-extent[0][0], -extent[0][1]));",
											"                } else {",
											"                    d3.select(\"#map-group\").transition().duration(1500).call(zoom.transform, d3.zoomIdentity.scale(1).translate(0, 0));",
											"                }",
											"            });",
											"",
											"        let svg = d3.select(\"#map\")",
											"            .append(\"svg\")",
											"            .attr(\"width\", width + margins.left + margins.right)",
											"            .attr(\"height\", height + margins.top + margins.bottom);",
											"",
											"        svg.append(\"rect\").attr(\"id\", \"backgroundRectangle\");",
											"",
											"        svg = svg.append(\"g\")",
											"            .attr(\"id\", \"map-group\")",
											"            .call(brush);",
											"",
											"        let projection = d3.geoMercator().translate([400, 350]).scale(125);",
											"        let mapGroup = svg.append(\"g\");",
											"        let mapPath = d3.geoPath().projection(projection);",
											"        ",
											"        mapGroup.selectAll(\"path\")",
											"            .data(topojson.feature(mapData, mapData.objects.countries).features)",
											"            .enter()",
											"            .append(\"path\")",
											"            .attr(\"d\", mapPath)",
											"            .attr(\"class\", \"projectionOutline\");",
											"",
											"        // Tooltip setup",
											"        const rect = document.getElementById(\"map\").getBoundingClientRect();",
											"        const offset = {top: rect.top, left: rect.left};",
											"        let tooltip = d3.select(\"#map\").append(\"div\").attr(\"class\", \"tooltip\");",
											"",
											"        let tipMouseover = function(d) {",
											"            tooltip.html(\"Longitude: <b>\" + d.long + \"</b><br/>Latitude: <b>\" + d.lat + \"</b>\")",
											"                .style(\"left\", (d3.event.pageX + 15 - offset.left) + \"px\")",
											"                .style(\"top\", (d3.event.pageY - 20 - offset.top) + \"px\")",
											"                .transition().duration(200).style(\"opacity\", 0.9);",
											"            d3.select(this).style(\"stroke\", \"white\").style(\"opacity\", 1);",
											"        };",
											"",
											"        let tipMouseout = function(d) {",
											"            tooltip.transition().duration(300).style(\"opacity\", 0);",
											"            d3.select(this).style(\"stroke\", \"none\").style(\"opacity\", 0.6);",
											"        };",
											"",
											"        svg.selectAll(\"circle\")",
											"            .data(pmInput)",
											"            .enter()",
											"            .append(\"circle\")",
											"            .attr(\"r\", 0)",
											"            .style(\"fill\", d => d.color)",
											"            .attr(\"cx\", d => projection([d.long, d.lat])[0])",
											"            .attr(\"cy\", d => projection([d.long, d.lat])[1])",
											"            .style(\"opacity\", 0.6)",
											"            .on(\"mouseover\", tipMouseover)",
											"            .on(\"mouseout\", tipMouseout)",
											"            .transition(d3.transition().duration(1000).ease(d3.easeQuadOut))",
											"            .attr(\"r\", d => d.circleSize);",
											"    }",
											"</script>",
											"`;",
											"",
											"// Parsing la risposta",
											"var response = pm.response.json();",
											"let parsedData = [];",
											"",
											"// Controllo se la risposta è valida",
											"if (!response || !Array.isArray(response)) {",
											"    console.error(\"La risposta non è valida:\", response);",
											"    return; // Interrompi l'esecuzione se la risposta non è valida",
											"}",
											"",
											"// Parsing dei dati dai tuoi coordinate",
											"let coord = response; // Usa direttamente il tuo array di coordinate",
											"for (let item of coord) {",
											"    let tempEntry = {};",
											"    tempEntry.lat = item.coordinates[1];",
											"    tempEntry.long = item.coordinates[0];",
											"    tempEntry.circleSize = 1; // Dimensione del cerchio, modifica come necessario",
											"    tempEntry.color = \"#F09D51\"; // Colore del cerchio, modifica come necessario",
											"    parsedData.push(tempEntry);",
											"}",
											"",
											"// Imposta il visualizzatore con i dati",
											"pm.visualizer.set(template, {",
											"    data: parsedData,",
											"    title: \"Map of Coordinates\"",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/coordinates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"coordinates"
									]
								}
							},
							"response": [
								{
									"name": "List of all coordinates",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/coordinates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n]"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/coordinates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"coordinates"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "media",
					"item": [
						{
							"name": "upload",
							"item": [
								{
									"name": "Obtain PresignedUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response has a status code of 200\", function () {",
													"    pm.response.to.have.status(200); // Verifica che il codice di stato sia 200",
													"});",
													"",
													"pm.test(\"Response time is acceptable\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000); // Assicurati che la risposta sia veloce (es. <1s)",
													"});",
													"",
													"",
													"pm.test(\"Response structure and values are valid\", function () {",
													"    const response = pm.response.json();",
													"",
													"    // Verifica il messaggio",
													"    pm.expect(response).to.have.property(\"message\", \"File validated and metadata saved successfully\");",
													"",
													"    // Controlla che il dato 'data' sia una stringa e sia un URL valido",
													"    pm.expect(response).to.have.property(\"data\").that.is.a(\"string\");",
													"    pm.expect(response.data).to.match(/^http:\\/\\/localhost:3004\\/upload-file\\?token=.+$/);",
													"",
													"    // Estrai il token dall'URL",
													"    const tokenMatch = response.data.match(/\\?token=(.+)$/);",
													"    pm.expect(tokenMatch).to.not.be.null; // Verifica che il token sia presente",
													"",
													"});",
													"",
													"pm.test(\"Token URL matches expected pattern\", function () {",
													"    const response = pm.response.json();",
													"    const tokenMatch = response.data.match(/\\?token=(.+)$/);",
													"    pm.expect(tokenMatch).to.not.be.null; // Verifica che il token sia presente",
													"});",
													"",
													"pm.test(\"Filename and content type are as expected\", function () {",
													"    const response = pm.response.json();",
													"",
													"    // Estrai e decodifica il token JWT",
													"    const token = response.data.match(/\\?token=(.+)$/)[1];",
													"    const jwtPayload = JSON.parse(atob(token.split(\".\")[1]));",
													"",
													"    pm.expect(jwtPayload.filename).to.eql(\"1.pdf\");",
													"    pm.expect(jwtPayload.contentType).to.eql(\"application/pdf\");",
													"});",
													"",
													"pm.test(\"Set id of document to call that\", function () {",
													"    const responseData = pm.response.json();",
													"    const presignedUrl = responseData.data;",
													"",
													"    pm.collectionVariables.set(\"presignedUrl\", presignedUrl); ",
													"    pm.environment.set(\"presignedUrlEnv\", presignedUrl)",
													"",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filename\": \"1.pdf\",\n    \"size\": 1020,\n    \"mimetype\": \"application/pdf\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5001/api/media/upload",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"api",
												"media",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Save File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response has a status code of 200\", function () {",
													"    pm.response.to.have.status(200); // Verifica che il codice di stato sia 200",
													"});",
													"",
													"pm.test(\"Response time is acceptable\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000); // Verifica che la risposta sia veloce (<1s)",
													"});",
													"",
													"",
													"pm.test(\"Response structure and values are valid\", function () {",
													"    const response = pm.response.json();",
													"",
													"    // Verifica che il messaggio sia quello atteso",
													"    pm.expect(response.message).to.eql(\"File uploaded successfully\");",
													"",
													"    // Verifica che l'URL sia valido",
													"    pm.expect(response.url).to.be.a(\"string\");",
													"",
													"    // Verifica che l'ID sia una stringa e che sia diverso da null",
													"    pm.expect(response.id).to.be.a(\"string\").that.is.not.null;",
													"",
													"    // Salva l'ID come variabile ambiente per un uso futuro",
													"    pm.environment.set(\"uploadedFileId\", response.id);",
													"});",
													"",
													"pm.test(\"URL and ID are correctly formatted\", function () {",
													"    const response = pm.response.json();",
													"",
													"    // Verifica che l'ID nell'URL corrisponda all'ID nella risposta",
													"    const urlId = response.url.split(\"/cdn/\")[1];",
													"    pm.expect(urlId).to.eql(response.id);",
													"});",
													"",
													"pm.test(\"Set id of document to call that\", function () {",
													"    const responseData = pm.response.json();",
													"    const mediaId = responseData.id;",
													"",
													"    pm.collectionVariables.set(\"mediaId\", mediaId); ",
													"    pm.environment.set(\"mediaIdEnv\", mediaId)",
													"",
													"    const mediaUrl = responseData.url;",
													"",
													"    pm.collectionVariables.set(\"mediaUrl\", mediaUrl); ",
													"    pm.environment.set(\"mediaUrlEnv\", mediaUrl)",
													"",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1efa69a0-f594-4de0-b217-a6a53bdab449"
												}
											]
										},
										"url": {
											"raw": "{{presignedUrl}}",
											"host": [
												"{{presignedUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response has a status code of 200\", function () {",
													"    pm.response.to.have.status(200); // Verifica che il codice di stato sia 200",
													"});",
													"",
													"pm.test(\"Response content type is PDF\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/pdf\"); // Verifica che il tipo di contenuto sia PDF",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mediaUrl}}",
											"host": [
												"{{mediaUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "stakeholders",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Recupera la risposta JSON",
											"const response = pm.response.json();",
											"",
											"// 1. Verifica lo stato HTTP",
											"pm.test(\"Lo stato HTTP è 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// 2. Verifica che la risposta contenga i campi attesi",
											"pm.test(\"La risposta contiene tutti i campi obbligatori\", function () {",
											"    const expectedKeys = [\"type\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\"];",
											"    expectedKeys.forEach(key => {",
											"        pm.expect(response).to.have.property(key);",
											"    });",
											"});",
											"",
											"// 3. Verifica il tipo dei valori",
											"pm.test(\"I tipi dei campi sono corretti\", function () {",
											"    pm.expect(response.type).to.be.a(\"string\");",
											"    pm.expect(response._id).to.be.a(\"string\"); // ID MongoDB come stringa",
											"    pm.expect(response.createdAt).to.be.a(\"string\"); // ISO date come stringa",
											"    pm.expect(response.updatedAt).to.be.a(\"string\");",
											"    pm.expect(response.__v).to.be.a(\"number\"); // Versione",
											"});",
											"",
											"// 4. Verifica il formato della data (ISO 8601)",
											"pm.test(\"createdAt e updatedAt sono date valide in formato ISO 8601\", function () {",
											"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"",
											"    pm.expect(response.createdAt).to.match(iso8601Regex);",
											"    pm.expect(response.updatedAt).to.match(iso8601Regex);",
											"});",
											"",
											"// 5. Verifica valori specifici (opzionale)",
											"// Test per il campo \"type\"",
											"pm.test('Il campo \"type\" ha il valore corretto', function () {",
											"    pm.expect(response.type).to.equal(\"TestStakeholder\");",
											"});",
											"",
											"pm.test(\"Set id of stakeholder to call that\", function () {",
											"    const responseData = pm.response.json();",
											"    const idStakeholder = responseData._id;",
											"",
											"    pm.collectionVariables.set(\"idStakeholder\", idStakeholder); ",
											"    pm.environment.set(\"idStakeholderEnv\", idStakeholder)",
											"",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newStakeholderType\": \"TestStakeholder\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/stakeholders/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stakeholders",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "error duplication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Recupera la risposta JSON",
											"const response = pm.response.json();",
											"",
											"// 1. Verifica lo stato HTTP",
											"pm.test(\"Lo stato HTTP è 400 o simile (Bad Request)\", function () {",
											"    pm.response.to.have.status(400); // Aggiorna se il codice di errore è diverso",
											"});",
											"",
											"// 2. Verifica che la risposta contenga il campo 'errors' come array",
											"pm.test(\"La risposta contiene un array 'errors'\", function () {",
											"    pm.expect(response).to.have.property(\"errors\");",
											"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"// 3. Verifica la struttura del primo elemento dell'array 'errors'",
											"pm.test(\"La struttura dell'errore è corretta\", function () {",
											"    const error = response.errors[0];",
											"    const expectedKeys = [\"type\", \"value\", \"msg\", \"path\", \"location\"];",
											"    ",
											"    expectedKeys.forEach(key => {",
											"        pm.expect(error).to.have.property(key);",
											"    });",
											"});",
											"",
											"// 4. Verifica il tipo dei valori nell'errore",
											"pm.test(\"I tipi dei campi nell'errore sono corretti\", function () {",
											"    const error = response.errors[0];",
											"",
											"    pm.expect(error.type).to.be.a(\"string\");",
											"    pm.expect(error.value).to.be.a(\"string\");",
											"    pm.expect(error.msg).to.be.a(\"string\");",
											"    pm.expect(error.path).to.be.a(\"string\");",
											"    pm.expect(error.location).to.be.a(\"string\");",
											"});",
											"",
											"// 5. Verifica il messaggio specifico di errore",
											"pm.test('Il messaggio di errore è corretto', function () {",
											"    const error = response.errors[0];",
											"    pm.expect(error.msg).to.equal(\"The stakeholder type already exists.\");",
											"});",
											"",
											"// 6. Verifica il valore specifico nel campo 'value'",
											"pm.test('Il campo \"value\" ha il valore corretto', function () {",
											"    const error = response.errors[0];",
											"    pm.expect(error.value).to.equal(\"TestStakeholder\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newStakeholderType\": \"TestStakeholder\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/stakeholders/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stakeholders",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "create 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Recupera la risposta JSON",
											"const response = pm.response.json();",
											"",
											"// 1. Verifica lo stato HTTP",
											"pm.test(\"Lo stato HTTP è 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// 2. Verifica che la risposta contenga i campi attesi",
											"pm.test(\"La risposta contiene tutti i campi obbligatori\", function () {",
											"    const expectedKeys = [\"type\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\"];",
											"    expectedKeys.forEach(key => {",
											"        pm.expect(response).to.have.property(key);",
											"    });",
											"});",
											"",
											"// 3. Verifica il tipo dei valori",
											"pm.test(\"I tipi dei campi sono corretti\", function () {",
											"    pm.expect(response.type).to.be.a(\"string\");",
											"    pm.expect(response._id).to.be.a(\"string\"); // ID MongoDB come stringa",
											"    pm.expect(response.createdAt).to.be.a(\"string\"); // ISO date come stringa",
											"    pm.expect(response.updatedAt).to.be.a(\"string\");",
											"    pm.expect(response.__v).to.be.a(\"number\"); // Versione",
											"});",
											"",
											"// 4. Verifica il formato della data (ISO 8601)",
											"pm.test(\"createdAt e updatedAt sono date valide in formato ISO 8601\", function () {",
											"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"",
											"    pm.expect(response.createdAt).to.match(iso8601Regex);",
											"    pm.expect(response.updatedAt).to.match(iso8601Regex);",
											"});",
											"",
											"// 5. Verifica valori specifici (opzionale)",
											"// Test per il campo \"type\"",
											"pm.test('Il campo \"type\" ha il valore corretto', function () {",
											"    pm.expect(response.type).to.equal(\"TestStakeholder2\");",
											"});",
											"",
											"pm.test(\"Set id of stakeholder to call that\", function () {",
											"    const responseData = pm.response.json();",
											"    const idStakeholder = responseData._id;",
											"",
											"    pm.collectionVariables.set(\"idStakeholder2\", idStakeholder); ",
											"    pm.environment.set(\"idStakeholderEnv2\", idStakeholder)",
											"",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newStakeholderType\": \"TestStakeholder2\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/stakeholders/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stakeholders",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Recupera la risposta JSON",
											"const response = pm.response.json();",
											"",
											"// 1. Verifica lo stato HTTP",
											"pm.test(\"Lo stato HTTP è 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. La risposta è un array non vuoto",
											"pm.test(\"La risposta è un array e non è vuoto\", function () {",
											"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"// 3. Verifica che esistano gli ultimi due stakeholder richiesti",
											"pm.test(\"L'array contiene 'TestStakeholder2' e 'TestStakeholder' con gli ID corretti\", function () {",
											"    // Recupera gli ID dalle variabili di ambiente",
											"    const idStakeholderEnv = pm.environment.get(\"idStakeholderEnv\");",
											"    const idStakeholderEnv2 = pm.environment.get(\"idStakeholderEnv2\");",
											"",
											"    // Filtra gli elementi nella risposta",
											"    const testStakeholder = response.find(item => item.type === \"TestStakeholder\");",
											"    const testStakeholder2 = response.find(item => item.type === \"TestStakeholder2\");",
											"    ",
											"    // Verifica che entrambi esistano",
											"    pm.expect(testStakeholder).to.exist;",
											"    pm.expect(testStakeholder2).to.exist;",
											"",
											"    // Verifica che gli ID corrispondano a quelli nelle variabili di ambiente",
											"    pm.expect(testStakeholder._id).to.equal(idStakeholderEnv);",
											"    pm.expect(testStakeholder2._id).to.equal(idStakeholderEnv2);",
											"});",
											"",
											"// 4. Verifica la struttura di ogni elemento",
											"pm.test(\"Ogni elemento ha i campi '_id' e 'type'\", function () {",
											"    response.forEach(item => {",
											"        pm.expect(item).to.have.property(\"_id\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"type\").that.is.a(\"string\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/stakeholders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stakeholders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "types",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Recupera la risposta JSON",
											"const response = pm.response.json();",
											"",
											"// 1. Verifica lo stato HTTP",
											"pm.test(\"Lo stato HTTP è 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// 2. Verifica che la risposta contenga i campi attesi",
											"pm.test(\"La risposta contiene tutti i campi obbligatori\", function () {",
											"    const expectedKeys = [\"type\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\"];",
											"    expectedKeys.forEach(key => {",
											"        pm.expect(response).to.have.property(key);",
											"    });",
											"});",
											"",
											"// 3. Verifica il tipo dei valori",
											"pm.test(\"I tipi dei campi sono corretti\", function () {",
											"    pm.expect(response.type).to.be.a(\"string\");",
											"    pm.expect(response._id).to.be.a(\"string\"); // ID MongoDB come stringa",
											"    pm.expect(response.createdAt).to.be.a(\"string\"); // ISO date come stringa",
											"    pm.expect(response.updatedAt).to.be.a(\"string\");",
											"    pm.expect(response.__v).to.be.a(\"number\"); // Versione",
											"});",
											"",
											"// 4. Verifica il formato della data (ISO 8601)",
											"pm.test(\"createdAt e updatedAt sono date valide in formato ISO 8601\", function () {",
											"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"",
											"    pm.expect(response.createdAt).to.match(iso8601Regex);",
											"    pm.expect(response.updatedAt).to.match(iso8601Regex);",
											"});",
											"",
											"// 5. Verifica valori specifici (opzionale)",
											"// Test per il campo \"type\"",
											"pm.test('Il campo \"type\" ha il valore corretto', function () {",
											"    pm.expect(response.type).to.equal(\"TestType\");",
											"});",
											"",
											"pm.test(\"Set id of type to call that\", function () {",
											"    const responseData = pm.response.json();",
											"    const idType = responseData._id;",
											"",
											"    pm.collectionVariables.set(\"idType\", idType); ",
											"    pm.environment.set(\"idTypeEnv\", idType)",
											"",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newDocumentType\": \"TestType\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/document-types/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"document-types",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "create 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Recupera la risposta JSON",
											"const response = pm.response.json();",
											"",
											"// 1. Verifica lo stato HTTP",
											"pm.test(\"Lo stato HTTP è 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// 2. Verifica che la risposta contenga i campi attesi",
											"pm.test(\"La risposta contiene tutti i campi obbligatori\", function () {",
											"    const expectedKeys = [\"type\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\"];",
											"    expectedKeys.forEach(key => {",
											"        pm.expect(response).to.have.property(key);",
											"    });",
											"});",
											"",
											"// 3. Verifica il tipo dei valori",
											"pm.test(\"I tipi dei campi sono corretti\", function () {",
											"    pm.expect(response.type).to.be.a(\"string\");",
											"    pm.expect(response._id).to.be.a(\"string\"); // ID MongoDB come stringa",
											"    pm.expect(response.createdAt).to.be.a(\"string\"); // ISO date come stringa",
											"    pm.expect(response.updatedAt).to.be.a(\"string\");",
											"    pm.expect(response.__v).to.be.a(\"number\"); // Versione",
											"});",
											"",
											"// 4. Verifica il formato della data (ISO 8601)",
											"pm.test(\"createdAt e updatedAt sono date valide in formato ISO 8601\", function () {",
											"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"",
											"    pm.expect(response.createdAt).to.match(iso8601Regex);",
											"    pm.expect(response.updatedAt).to.match(iso8601Regex);",
											"});",
											"",
											"// 5. Verifica valori specifici (opzionale)",
											"// Test per il campo \"type\"",
											"pm.test('Il campo \"type\" ha il valore corretto', function () {",
											"    pm.expect(response.type).to.equal(\"TestType2\");",
											"});",
											"",
											"pm.test(\"Set id of type to call that\", function () {",
											"    const responseData = pm.response.json();",
											"    const idType = responseData._id;",
											"",
											"    pm.collectionVariables.set(\"idType2\", idType); ",
											"    pm.environment.set(\"idTypeEnv2\", idType)",
											"",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newDocumentType\": \"TestType2\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/document-types/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"document-types",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "error duplication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Recupera la risposta JSON",
											"const response = pm.response.json();",
											"",
											"// 1. Verifica lo stato HTTP",
											"pm.test(\"Lo stato HTTP è 400 o simile (Bad Request)\", function () {",
											"    pm.response.to.have.status(400); // Aggiorna se il codice di errore è diverso",
											"});",
											"",
											"// 2. Verifica che la risposta contenga il campo 'errors' come array",
											"pm.test(\"La risposta contiene un array 'errors'\", function () {",
											"    pm.expect(response).to.have.property(\"errors\");",
											"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"// 3. Verifica la struttura del primo elemento dell'array 'errors'",
											"pm.test(\"La struttura dell'errore è corretta\", function () {",
											"    const error = response.errors[0];",
											"    const expectedKeys = [\"type\", \"value\", \"msg\", \"path\", \"location\"];",
											"    ",
											"    expectedKeys.forEach(key => {",
											"        pm.expect(error).to.have.property(key);",
											"    });",
											"});",
											"",
											"// 4. Verifica il tipo dei valori nell'errore",
											"pm.test(\"I tipi dei campi nell'errore sono corretti\", function () {",
											"    const error = response.errors[0];",
											"",
											"    pm.expect(error.type).to.be.a(\"string\");",
											"    pm.expect(error.value).to.be.a(\"string\");",
											"    pm.expect(error.msg).to.be.a(\"string\");",
											"    pm.expect(error.path).to.be.a(\"string\");",
											"    pm.expect(error.location).to.be.a(\"string\");",
											"});",
											"",
											"// 5. Verifica il messaggio specifico di errore",
											"pm.test('Il messaggio di errore è corretto', function () {",
											"    const error = response.errors[0];",
											"    pm.expect(error.msg).to.equal(\"The document type already exists.\");",
											"});",
											"",
											"// 6. Verifica il valore specifico nel campo 'value'",
											"pm.test('Il campo \"value\" ha il valore corretto', function () {",
											"    const error = response.errors[0];",
											"    pm.expect(error.value).to.equal(\"TestType\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newDocumentType\": \"TestType\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/document-types/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"document-types",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Recupera la risposta JSON",
											"const response = pm.response.json();",
											"",
											"// 1. Verifica lo stato HTTP",
											"pm.test(\"Lo stato HTTP è 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. La risposta è un array non vuoto",
											"pm.test(\"La risposta è un array e non è vuoto\", function () {",
											"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"// 3. Verifica che esistano gli ultimi due stakeholder richiesti",
											"pm.test(\"L'array contiene 'TestType' e 'TestType2' con gli ID corretti\", function () {",
											"    // Recupera gli ID dalle variabili di ambiente",
											"    const idTypeEnv = pm.environment.get(\"idTypeEnv\");",
											"    const idTypeEnv2 = pm.environment.get(\"idTypeEnv2\");",
											"",
											"    // Filtra gli elementi nella risposta",
											"    const testType = response.find(item => item.type === \"TestType\");",
											"    const testType2 = response.find(item => item.type === \"TestType2\");",
											"    ",
											"    // Verifica che entrambi esistano",
											"    pm.expect(testType).to.exist;",
											"    pm.expect(testType2).to.exist;",
											"",
											"    // Verifica che gli ID corrispondano a quelli nelle variabili di ambiente",
											"    pm.expect(testType._id).to.equal(idTypeEnv);",
											"    pm.expect(testType2._id).to.equal(idTypeEnv2);",
											"});",
											"",
											"// 4. Verifica la struttura di ogni elemento",
											"pm.test(\"Ogni elemento ha i campi '_id' e 'type'\", function () {",
											"    response.forEach(item => {",
											"        pm.expect(item).to.have.property(\"_id\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"type\").that.is.a(\"string\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/document-types",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"document-types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "documents",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "errors",
									"item": [
										{
											"name": "Wrong values",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": \"TestStak\",\n  \"scale\": \"1:1000\",\n  \"type\": \"CONFLICT\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024-11-05\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										},
										{
											"name": "Wrong values 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"pm.test(\"Response time is below 2000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);",
															"});",
															"",
															"pm.test(\"Errors contain correct fields and messages\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.expect(jsonData).to.have.property(\"errors\");",
															"    pm.expect(jsonData.errors).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    jsonData.errors.forEach((error) => {",
															"        pm.expect(error).to.have.all.keys(\"type\", \"value\", \"msg\", \"path\", \"location\");",
															"",
															"        // Verifica se i messaggi di errore corrispondono a quelli attesi",
															"        if (error.path === \"stakeholders\") {",
															"            pm.expect(error.msg).to.eql(\"Stakeholder(s) must be valid MongoDB ObjectId\");",
															"        } else if (error.path === \"scale\") {",
															"            pm.expect(error.msg).to.eql(\"Architectural Scale must be in the 1:number format\");",
															"        } else if (error.path === \"type\") {",
															"            pm.expect(error.msg).to.eql(\"DocumentType must be valid MongoDB ObjectId\");",
															"        }",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"LKAB\"],\n  \"scale\": \"ARCHITECTURAL\",\n  \"type\": \"CONFLICT\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024-11-05\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										},
										{
											"name": "Wrong values 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"",
															"pm.test(\"Error response structure and content validation\", function () {",
															"    const responseData = pm.response.json();",
															"",
															"    // Verifica la struttura principale della risposta",
															"    pm.expect(responseData).to.be.an(\"object\");",
															"    pm.expect(responseData).to.have.property(\"errors\").that.is.an(\"array\").with.lengthOf(3);",
															"",
															"    // Funzione di validazione per singolo errore",
															"    function validateError(error, expected) {",
															"        pm.expect(error).to.be.an(\"object\");",
															"        pm.expect(error).to.have.all.keys(\"type\", \"value\", \"msg\", \"path\", \"location\");",
															"        pm.expect(error.type).to.eql(\"field\");",
															"        pm.expect(error.value).to.eql(expected.value);",
															"        pm.expect(error.msg).to.eql(expected.msg);",
															"        pm.expect(error.path).to.eql(expected.path);",
															"        pm.expect(error.location).to.eql(\"body\");",
															"    }",
															"",
															"    // Validazione degli errori attesi",
															"    const expectedErrors = [",
															"        {",
															"            value: [\"LKAB\"],",
															"            msg: \"Stakeholder(s) must be valid MongoDB ObjectId\",",
															"            path: \"stakeholders\"",
															"        },",
															"        {",
															"            value: \"ARCHITECTURAL\",",
															"            msg: \"Architectural Scale must be in the 1:number format\",",
															"            path: \"scale\"",
															"        },",
															"        {",
															"            value: \"CONFLICT\",",
															"            msg: \"DocumentType must be valid MongoDB ObjectId\",",
															"            path: \"type\"",
															"        }",
															"    ];",
															"",
															"    // Itera sugli errori presenti nella risposta",
															"    responseData.errors.forEach((error, index) => {",
															"        validateError(error, expectedErrors[index]);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"LKAB\"],\n  \"scale\": \"ARCHITECTURAL\",\n  \"architecturalScale\": \"1:aa\",\n  \"type\": \"CONFLICT\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024-11-05\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										},
										{
											"name": "wrong values 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Controlla che lo stato della risposta sia 400",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"Others\"],\n  \"scale\":\"ARCHITECTURAL\",\n  \"architecturalScale\":\"1:10000\",\n  \"type\": \"CONFLICT\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary2\",\n  \"date\": \"2024-11-05\",\n  \"coordinates\": \"{{idPointEnv}}\",\n  \"media\": [\"{{mediaIdEnv}}\"],\n  \"connections\": [\n    {\n      \"document\": \"{{idDocumentEnv}}\",\n      \"type\": \"DIRECT\"\n    }\n    \n  ]\n  \n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										}
									]
								},
								{
									"name": "true with env",
									"item": [
										{
											"name": "without connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Controlla che lo stato della risposta sia 200",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response structure and values match expected data\", function () {",
															"    // Valori dinamici dalle variabili di ambiente",
															"    const stakeholderId = pm.environment.get(\"idStakeholderEnv\");",
															"    const typeId = pm.environment.get(\"idTypeEnv\");",
															"",
															"    const expectedResponse = {",
															"        \"title\": \"TestDoc\",",
															"        \"stakeholders\": [",
															"            {",
															"                \"_id\": stakeholderId,",
															"                \"type\": \"TestStakeholder\"",
															"            }",
															"        ],",
															"        \"scale\": \"ARCHITECTURAL\",",
															"        \"architecturalScale\": \"1:1000\",",
															"        \"type\": {",
															"            \"_id\": typeId,",
															"            \"type\": \"TestType\"",
															"        },",
															"        \"date\": \"2024-11-05\",",
															"        \"language\": \"it\",",
															"        \"media\": null,",
															"        \"coordinates\": {",
															"            \"_id\": \"673cb4557c224576302f7a77\",",
															"            \"type\": \"Point\",",
															"            \"coordinates\": [",
															"                12.4924,",
															"                41.8902",
															"            ],",
															"            \"name\": \"TestColosseo\",",
															"            \"__v\": 0",
															"        },",
															"        \"summary\": \"TestSummary\",",
															"        \"connections\": []",
															"    };",
															"",
															"    const responseData = pm.response.json();",
															"",
															"    // Verifica che la risposta abbia la struttura attesa",
															"    pm.expect(responseData).to.be.an(\"object\");",
															"    pm.expect(responseData).to.have.all.keys(",
															"        \"id\",",
															"        \"title\",",
															"        \"stakeholders\",",
															"        \"scale\",",
															"        \"architecturalScale\",",
															"        \"type\",",
															"        \"date\",",
															"        \"language\",",
															"        \"media\",",
															"        \"coordinates\",",
															"        \"summary\",",
															"        \"connections\"",
															"    );",
															"",
															"    // Verifica valori a livello radice",
															"    pm.expect(responseData.title).to.eql(expectedResponse.title);",
															"    pm.expect(responseData.scale).to.eql(expectedResponse.scale);",
															"    pm.expect(responseData.architecturalScale).to.eql(expectedResponse.architecturalScale);",
															"    pm.expect(responseData.date).to.eql(expectedResponse.date);",
															"    pm.expect(responseData.language).to.eql(expectedResponse.language);",
															"    pm.expect(responseData.media).to.eql(expectedResponse.media);",
															"    pm.expect(responseData.summary).to.eql(expectedResponse.summary);",
															"    pm.expect(responseData.connections).to.eql(expectedResponse.connections);",
															"",
															"    // Verifica lo stakeholder",
															"    pm.expect(responseData.stakeholders).to.be.an(\"array\").that.is.not.empty;",
															"    const stakeholder = responseData.stakeholders[0]; ",
															"    pm.expect(stakeholder._id).to.eql(stakeholderId);",
															"",
															"     // Verifica il type",
															"    pm.expect(responseData.type._id).to.eql(typeId);",
															"",
															"    // Verifica struttura e valori di \"coordinates\"",
															"    pm.expect(responseData.coordinates).to.be.an(\"object\");",
															"    pm.expect(responseData.coordinates).to.have.all.keys(\"_id\", \"type\", \"coordinates\", \"name\", \"__v\");",
															"    pm.expect(responseData.coordinates.type).to.eql(expectedResponse.coordinates.type);",
															"    pm.expect(responseData.coordinates.coordinates).to.eql(expectedResponse.coordinates.coordinates);",
															"    pm.expect(responseData.coordinates.name).to.eql(expectedResponse.coordinates.name);",
															"    pm.expect(responseData.coordinates.__v).to.eql(expectedResponse.coordinates.__v);",
															"});",
															"",
															"",
															"pm.test(\"Set id of document to call that\", function () {",
															"    const responseData = pm.response.json();",
															"    const idDocument = responseData.id;",
															"",
															"    pm.collectionVariables.set(\"idDocument\", idDocument); ",
															"    pm.environment.set(\"idDocumentEnv\", idDocument)",
															"",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"{{idStakeholderEnv}}\"],\n  \"scale\":\"ARCHITECTURAL\",\n  \"architecturalScale\": \"1:1000\",\n  \"type\": \"{{idTypeEnv}}\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024-11-05\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "with connection and media",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Controlla che lo stato della risposta sia 200",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response structure and values match expected data\", function () {",
															"",
															"    const stakeholderId2 = pm.environment.get(\"idStakeholderEnv2\");",
															"    const typeId = pm.environment.get(\"idTypeEnv2\");",
															"",
															"    const expectedResponse = {",
															"        \"id\": \"673cb76dd9e0e3c36de1d7e0\",",
															"        \"title\": \"TestDoc\",",
															"        \"stakeholders\": [",
															"            {",
															"                \"_id\": stakeholderId2,",
															"                \"type\": \"TestStakeholder2\"",
															"            }",
															"        ],",
															"        \"scale\": \"ARCHITECTURAL\",",
															"        \"architecturalScale\": \"1:10000\",",
															"        \"type\": {",
															"            \"_id\": typeId,",
															"            \"type\": \"TestType\"",
															"        },",
															"        \"date\": \"2024-11-05\",",
															"        \"connections\": [",
															"            {",
															"                \"document\": \"673cb66e7c224576302f7aba\",",
															"                \"type\": \"DIRECT\"",
															"            }",
															"        ],",
															"        \"language\": \"it\",",
															"        \"media\": [",
															"        {",
															"            \"filename\": \"1.pdf\",",
															"            \"url\": \"/cdn/673da80b1a557aff281a41eb\",",
															"            \"type\": \"document\",",
															"            \"mimetype\": \"application/pdf\"",
															"        }",
															"    ],",
															"        \"coordinates\": {",
															"            \"_id\": \"673cb4557c224576302f7a77\",",
															"            \"type\": \"Point\",",
															"            \"coordinates\": [",
															"                12.4924,",
															"                41.8902",
															"            ],",
															"            \"name\": \"TestColosseo\",",
															"            \"__v\": 0",
															"        },",
															"        \"summary\": \"TestSummary2\"",
															"    };",
															"",
															"    const responseData = pm.response.json();",
															"",
															"    // Verifica che la risposta abbia la struttura attesa",
															"    pm.expect(responseData).to.be.an(\"object\");",
															"    pm.expect(responseData).to.have.all.keys(",
															"        \"id\",",
															"        \"title\",",
															"        \"stakeholders\",",
															"        \"scale\",",
															"        \"architecturalScale\",",
															"        \"type\",",
															"        \"date\",",
															"        \"connections\",",
															"        \"language\",",
															"        \"media\",",
															"        \"coordinates\",",
															"        \"summary\"",
															"    );",
															"",
															"    const mediaId = pm.environment.get(\"mediaIdEnv\")",
															"",
															"    // Verifica valori a livello radice",
															"    pm.expect(responseData.title).to.eql(expectedResponse.title);",
															"    pm.expect(responseData.scale).to.eql(expectedResponse.scale);",
															"    pm.expect(responseData.architecturalScale).to.eql(expectedResponse.architecturalScale);",
															"    ",
															"    pm.expect(responseData.date).to.eql(expectedResponse.date);",
															"    pm.expect(responseData.language).to.eql(expectedResponse.language);",
															"    pm.expect(responseData.summary).to.eql(expectedResponse.summary);",
															"",
															"    pm.expect(responseData.stakeholders).to.be.an(\"array\").that.is.not.empty;",
															"    const stakeholder2 = responseData.stakeholders[0]; ",
															"    pm.expect(stakeholder2._id).to.eql(stakeholderId2);",
															"",
															"    pm.expect(responseData.type._id).to.eql(typeId);",
															"",
															"    // Verifica array connections",
															"    pm.expect(responseData.connections).to.be.an(\"array\");",
															"    pm.expect(responseData.connections.length).to.eql(expectedResponse.connections.length);",
															"",
															"    pm.expect(responseData.media).to.be.an(\"array\").with.length(1);",
															"    pm.expect(responseData.media[0].filename).to.eql(\"1.pdf\");",
															"    pm.expect(responseData.media[0].url).to.eql(`/cdn/${mediaId}`); ",
															"    pm.expect(responseData.media[0].type).to.eql(\"document\");",
															"    pm.expect(responseData.media[0].mimetype).to.eql(\"application/pdf\");",
															"",
															"    // Verifica struttura e valori di \"coordinates\"",
															"    pm.expect(responseData.coordinates).to.be.an(\"object\");",
															"    pm.expect(responseData.coordinates).to.have.all.keys(\"_id\", \"type\", \"coordinates\", \"name\", \"__v\");",
															"    pm.expect(responseData.coordinates.type).to.eql(expectedResponse.coordinates.type);",
															"    pm.expect(responseData.coordinates.coordinates).to.eql(expectedResponse.coordinates.coordinates);",
															"    pm.expect(responseData.coordinates.name).to.eql(expectedResponse.coordinates.name);",
															"    pm.expect(responseData.coordinates.__v).to.eql(expectedResponse.coordinates.__v);",
															"});",
															"",
															"pm.test(\"Set id of document to call that\", function () {",
															"    const responseData = pm.response.json();",
															"    const idDocument = responseData.id;",
															"",
															"    pm.collectionVariables.set(\"idDocument2\", idDocument); ",
															"    pm.environment.set(\"idDocumentEnv2\", idDocument)",
															"",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"{{idStakeholderEnv2}}\"],\n  \"scale\":\"ARCHITECTURAL\",\n  \"architecturalScale\":\"1:10000\",\n  \"type\": \"{{idTypeEnv2}}\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary2\",\n  \"date\": \"2024-11-05\",\n  \"coordinates\": \"{{idPointEnv}}\",\n  \"media\": [\"{{mediaIdEnv}}\"],\n  \"connections\": [\n    {\n      \"document\": \"{{idDocumentEnv}}\",\n      \"type\": \"DIRECT\"\n    }\n    \n  ]\n  \n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										}
									]
								},
								{
									"name": "true without env",
									"item": [
										{
											"name": "only year",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Controlla che lo stato della risposta sia 200",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response contains expected properties\", () => {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.expect(jsonData).to.have.property(\"title\", \"TestDoc\");",
															"    pm.expect(jsonData).to.have.property(\"stakeholders\").that.is.an(\"array\");",
															"    pm.expect(jsonData).to.have.property(\"scale\", \"ARCHITECTURAL\");",
															"    pm.expect(jsonData).to.have.property(\"architecturalScale\", \"1:1000\");",
															"    pm.expect(jsonData).to.have.property(\"type\");",
															"    pm.expect(jsonData).to.have.property(\"date\", \"2024\");",
															"    pm.expect(jsonData).to.have.property(\"language\", \"it\");",
															"    pm.expect(jsonData).to.have.property(\"media\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"summary\", \"TestSummary\");",
															"    pm.expect(jsonData).to.have.property(\"connections\").that.is.an(\"array\").that.is.empty;",
															"",
															"    const coordinates = jsonData.coordinates;",
															"    pm.expect(coordinates).to.have.property(\"type\", \"Point\");",
															"    pm.expect(coordinates).to.have.property(\"coordinates\").that.is.an(\"array\").with.length(2);",
															"    pm.expect(coordinates.coordinates).to.deep.equal([12.4924, 41.8902]);",
															"    pm.expect(coordinates).to.have.property(\"name\", \"TestColosseo\");",
															"    pm.expect(coordinates).to.have.property(\"__v\", 0);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"{{idStakeholderEnv}}\"],\n  \"scale\":\"ARCHITECTURAL\",\n  \"architecturalScale\": \"1:1000\",\n  \"type\": \"{{idTypeEnv}}\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										},
										{
											"name": "year and month",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Controlla che lo stato della risposta sia 200",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response contains expected properties\", () => {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.expect(jsonData).to.have.property(\"title\", \"TestDoc\");",
															"    pm.expect(jsonData).to.have.property(\"stakeholders\").that.is.an(\"array\");",
															"    pm.expect(jsonData).to.have.property(\"scale\", \"ARCHITECTURAL\");",
															"    pm.expect(jsonData).to.have.property(\"architecturalScale\", \"1:1000\");",
															"    pm.expect(jsonData).to.have.property(\"type\");",
															"    pm.expect(jsonData).to.have.property(\"date\", \"2024-10\");",
															"    pm.expect(jsonData).to.have.property(\"language\", \"it\");",
															"    pm.expect(jsonData).to.have.property(\"media\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"summary\", \"TestSummary\");",
															"    pm.expect(jsonData).to.have.property(\"connections\").that.is.an(\"array\").that.is.empty;",
															"",
															"    const coordinates = jsonData.coordinates;",
															"    pm.expect(coordinates).to.have.property(\"type\", \"Point\");",
															"    pm.expect(coordinates).to.have.property(\"coordinates\").that.is.an(\"array\").with.length(2);",
															"    pm.expect(coordinates.coordinates).to.deep.equal([12.4924, 41.8902]);",
															"    pm.expect(coordinates).to.have.property(\"name\", \"TestColosseo\");",
															"    pm.expect(coordinates).to.have.property(\"__v\", 0);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"{{idStakeholderEnv}}\"],\n  \"scale\":\"ARCHITECTURAL\",\n  \"architecturalScale\": \"1:1000\",\n  \"type\": \"{{idTypeEnv}}\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024-10\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										},
										{
											"name": "different scale",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Controlla che lo stato della risposta sia 200",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response contains expected properties\", () => {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.expect(jsonData).to.have.property(\"title\", \"TestDoc\");",
															"    pm.expect(jsonData).to.have.property(\"stakeholders\").that.is.an(\"array\");",
															"    pm.expect(jsonData).to.have.property(\"scale\", \"TEXT\");",
															"    pm.expect(jsonData).to.have.property(\"type\");",
															"    pm.expect(jsonData).to.have.property(\"date\", \"2024\");",
															"    pm.expect(jsonData).to.have.property(\"language\", \"it\");",
															"    pm.expect(jsonData).to.have.property(\"media\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"summary\", \"TestSummary\");",
															"    pm.expect(jsonData).to.have.property(\"connections\").that.is.an(\"array\").that.is.empty;",
															"",
															"    const coordinates = jsonData.coordinates;",
															"    pm.expect(coordinates).to.have.property(\"type\", \"Point\");",
															"    pm.expect(coordinates).to.have.property(\"coordinates\").that.is.an(\"array\").with.length(2);",
															"    pm.expect(coordinates.coordinates).to.deep.equal([12.4924, 41.8902]);",
															"    pm.expect(coordinates).to.have.property(\"name\", \"TestColosseo\");",
															"    pm.expect(coordinates).to.have.property(\"__v\", 0);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"{{idStakeholderEnv}}\"],\n  \"scale\":\"TEXT\",\n  \"type\": \"{{idTypeEnv}}\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										},
										{
											"name": "different stakeholder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Controlla che lo stato della risposta sia 200",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response contains expected properties\", () => {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.expect(jsonData).to.have.property(\"title\", \"TestDoc\");",
															"    pm.expect(jsonData).to.have.property(\"stakeholders\").that.is.an(\"array\");",
															"    pm.expect(jsonData).to.have.property(\"scale\", \"TEXT\");",
															"    pm.expect(jsonData).to.have.property(\"type\");",
															"    pm.expect(jsonData).to.have.property(\"date\", \"2024\");",
															"    pm.expect(jsonData).to.have.property(\"language\", \"it\");",
															"    pm.expect(jsonData).to.have.property(\"media\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"summary\", \"TestSummary\");",
															"    pm.expect(jsonData).to.have.property(\"connections\").that.is.an(\"array\").that.is.empty;",
															"",
															"    const coordinates = jsonData.coordinates;",
															"    pm.expect(coordinates).to.have.property(\"type\", \"Point\");",
															"    pm.expect(coordinates).to.have.property(\"coordinates\").that.is.an(\"array\").with.length(2);",
															"    pm.expect(coordinates.coordinates).to.deep.equal([12.4924, 41.8902]);",
															"    pm.expect(coordinates).to.have.property(\"name\", \"TestColosseo\");",
															"    pm.expect(coordinates).to.have.property(\"__v\", 0);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"{{idStakeholderEnv2}}\"],\n  \"scale\":\"TEXT\",\n  \"type\": \"{{idTypeEnv}}\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										},
										{
											"name": "multiple stakeholders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Controlla che lo stato della risposta sia 200",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response contains expected properties\", () => {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.expect(jsonData).to.have.property(\"title\", \"TestDoc\");",
															"    pm.expect(jsonData).to.have.property(\"stakeholders\").that.is.an(\"array\").with.length(2);",
															"    pm.expect(jsonData).to.have.property(\"scale\", \"TEXT\");",
															"    pm.expect(jsonData).to.have.property(\"type\");",
															"    pm.expect(jsonData).to.have.property(\"date\", \"2024\");",
															"    pm.expect(jsonData).to.have.property(\"language\", \"it\");",
															"    pm.expect(jsonData).to.have.property(\"media\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"summary\", \"TestSummary\");",
															"    pm.expect(jsonData).to.have.property(\"connections\").that.is.an(\"array\").that.is.empty;",
															"",
															"    const coordinates = jsonData.coordinates;",
															"    pm.expect(coordinates).to.have.property(\"type\", \"Point\");",
															"    pm.expect(coordinates).to.have.property(\"coordinates\").that.is.an(\"array\").with.length(2);",
															"    pm.expect(coordinates.coordinates).to.deep.equal([12.4924, 41.8902]);",
															"    pm.expect(coordinates).to.have.property(\"name\", \"TestColosseo\");",
															"    pm.expect(coordinates).to.have.property(\"__v\", 0);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"TestDoc\",\n  \"stakeholders\": [\"{{idStakeholderEnv}}\", \"{{idStakeholderEnv2}}\"],\n  \"scale\":\"TEXT\",\n  \"type\": \"{{idTypeEnv}}\",\n  \"language\": \"it\",\n  \"summary\": \"TestSummary\",\n  \"date\": \"2024\",\n  \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"create"
													]
												}
											},
											"response": [
												{
													"name": "Document added successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "auth-token",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/documents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"documents"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"document\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"CONSULTATION\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Point\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "get {id}",
							"item": [
								{
									"name": "Check Connection Created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Controlla che lo stato della risposta sia 200",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Verifica che la risposta sia in formato JSON",
													"pm.test(\"Response is in JSON format\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Verifica il contenuto della risposta",
													"pm.test(\"Verify response structure and values\", function () {",
													"    const response = pm.response.json();",
													"",
													"    const idDoc = pm.environment.get(\"idDocumentEnv\");",
													"",
													"    // Verifica che l'oggetto 'document' contenga i campi previsti",
													"    pm.expect(response.id).to.eql(idDoc);",
													"    pm.expect(response.title).to.eql(\"TestDoc\");",
													"    pm.expect(response.stakeholders).that.is.an(\"array\");",
													"    pm.expect(response.scale).to.eql(\"ARCHITECTURAL\")",
													"    pm.expect(response.architecturalScale).to.eql(\"1:1000\");",
													"    pm.expect(response.type).to.exist;",
													"    pm.expect(response.date).to.eql(\"2024-11-05\");",
													"    pm.expect(response.language).to.eql(\"it\");",
													"",
													"    // Verifica che il campo media sia un array vuoto",
													"    pm.expect(response.media).to.be.null;",
													"",
													"    const idPoint = pm.environment.get(\"idPointEnv\");",
													"",
													"    // Verifica la struttura delle coordinate",
													"    pm.expect(response.coordinates).to.be.an(\"object\");",
													"    pm.expect(response.coordinates._id).to.eql(idPoint);",
													"    pm.expect(response.coordinates.type).to.eql(\"Point\");",
													"    pm.expect(response.coordinates.coordinates).to.be.an(\"array\").with.lengthOf(2);",
													"    pm.expect(response.coordinates.coordinates[0]).to.eql(12.4924);",
													"    pm.expect(response.coordinates.coordinates[1]).to.eql(41.8902);",
													"    pm.expect(response.coordinates.name).to.eql(\"TestColosseo\");",
													"    pm.expect(response.coordinates.__v).to.eql(0);",
													"",
													"    // Verifica che il campo summary corrisponda al valore atteso",
													"    pm.expect(response.summary).to.eql(\"TestSummary\");",
													"",
													"    // Verifica che ci sia almeno una connessione con 'document' uguale alla variabile di ambiente 'idDoc2'",
													"    const idDoc2 = pm.environment.get(\"idDocumentEnv2\");",
													"    const connectionMatch = response.connections.some(connection => connection.document === idDoc2);",
													"",
													"    pm.test(\"Connections array contains at least one document equal to idDoc2\", function () {",
													"        pm.expect(connectionMatch).to.be.true;",
													"    });",
													"",
													"    // Verifica che tutti i campi 'type' nelle connessioni siano impostati su 'LINK1'",
													"    const allLinksAreLink1 = response.connections.every(connection => connection.type === \"DIRECT\");",
													"",
													"    pm.test(\"All connections have type 'DIRECT'\", function () {",
													"        pm.expect(allLinksAreLink1).to.be.true;",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/documents/{{idDocumentEnv}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												"{{idDocumentEnv}}"
											]
										}
									},
									"response": [
										{
											"name": "Document data",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/documents/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}"
										},
										{
											"name": "Document not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/documents/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "put {id}",
							"item": [
								{
									"name": "Update a document by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Controlla che lo stato della risposta sia 200",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Verifica che la risposta sia in formato JSON",
													"pm.test(\"Response is in JSON format\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Verifica il contenuto della risposta",
													"pm.test(\"Verify response structure and values\", function () {",
													"    const response = pm.response.json();",
													"",
													"    const idDoc = pm.environment.get(\"idDocumentEnv\");",
													"    const stakeholderId = pm.environment.get(\"idStakeholderEnv\");",
													"    const stakeholderId2 = pm.environment.get(\"idStakeholderEnv2\");",
													"",
													"    // Verifica che l'oggetto 'document' contenga i campi previsti",
													"    pm.expect(response.id).to.eql(idDoc);",
													"    pm.expect(response.title).to.eql(\"TestDoc\");",
													"    pm.expect(response.architecturalScale).to.eql(\"1:1000\");",
													"    pm.expect(response.type).to.exists;",
													"    pm.expect(response.date).to.eql(\"2024-11-05\");",
													"    pm.expect(response.language).to.eql(\"it\");",
													"",
													"    pm.expect(response.stakeholders).to.be.an(\"array\").that.is.not.empty;",
													"    const stakeholder = response.stakeholders[0]; ",
													"    pm.expect(stakeholder._id).to.eql(stakeholderId);",
													"    const stakeholder2 = response.stakeholders[1]; ",
													"    pm.expect(stakeholder2._id).to.eql(stakeholderId2);",
													"",
													"    // Verifica che il campo media sia un array vuoto",
													"    pm.expect(response.media).to.be.null;",
													"",
													"    const idPoint = pm.environment.get(\"idPointEnv\");",
													"",
													"    // Verifica la struttura delle coordinate",
													"    pm.expect(response.coordinates).to.be.an(\"object\");",
													"    pm.expect(response.coordinates._id).to.eql(idPoint);",
													"    pm.expect(response.coordinates.type).to.eql(\"Point\");",
													"    pm.expect(response.coordinates.coordinates).to.be.an(\"array\").with.lengthOf(2);",
													"    pm.expect(response.coordinates.coordinates[0]).to.eql(12.4924);",
													"    pm.expect(response.coordinates.coordinates[1]).to.eql(41.8902);",
													"    pm.expect(response.coordinates.name).to.eql(\"TestColosseo\");",
													"    pm.expect(response.coordinates.__v).to.eql(0);",
													"",
													"    // Verifica che il campo summary corrisponda al valore atteso",
													"    pm.expect(response.summary).to.eql(\"TestSummary\");",
													"",
													"    // Verifica che ci sia almeno una connessione con 'document' uguale alla variabile di ambiente 'idDoc2'",
													"    const idDoc2 = pm.environment.get(\"idDocumentEnv2\");",
													"    const connectionMatch = response.connections.some(connection => connection.document === idDoc2);",
													"",
													"    pm.test(\"Connections array contains at least one document equal to idDoc2\", function () {",
													"        pm.expect(connectionMatch).to.be.true;",
													"    });",
													"",
													"    // Verifica che tutti i campi 'type' nelle connessioni siano impostati su 'LINK1'",
													"    const allLinksAreLink1 = response.connections.every(connection => connection.type === \"DIRECT\");",
													"",
													"    pm.test(\"All connections have type 'DIRECT'\", function () {",
													"        pm.expect(allLinksAreLink1).to.be.true;",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"stakeholders\": [\n    \"{{idStakeholderEnv}}\", \n    \"{{idStakeholderEnv2}}\"\n    ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/documents/{{idDocumentEnv}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												"{{idDocumentEnv}}"
											]
										}
									},
									"response": [
										{
											"name": "Document updated successfully",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}"
										},
										{
											"name": "Document not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"title\": \"<string>\",\n  \"stakeholders\": \"<string>\",\n  \"scale\": \"<string>\",\n  \"type\": \"CONFLICT\",\n  \"connections\": [\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK1\"\n    },\n    {\n      \"document\": \"<string>\",\n      \"type\": \"LINK3\"\n    }\n  ],\n  \"language\": \"<string>\",\n  \"summary\": \"<string>\",\n  \"date\": \"<string>\",\n  \"coordinates\": {\n    \"id\": \"<string>\",\n    \"type\": \"Point\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ],\n    \"name\": \"<string>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get types",
							"item": [
								{
									"name": "Get All Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Recupera la risposta JSON",
													"const response = pm.response.json();",
													"",
													"// 1. Verifica lo stato HTTP",
													"pm.test(\"Lo stato HTTP è 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// 2. La risposta è un array non vuoto",
													"pm.test(\"La risposta è un array e non è vuoto\", function () {",
													"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;",
													"});",
													"",
													"// 3. Verifica che esistano gli ultimi due stakeholder richiesti",
													"pm.test(\"L'array contiene 'TestType' e 'TestType2' con gli ID corretti\", function () {",
													"    // Recupera gli ID dalle variabili di ambiente",
													"    const idTypeEnv = pm.environment.get(\"idTypeEnv\");",
													"    const idTypeEnv2 = pm.environment.get(\"idTypeEnv2\");",
													"",
													"    // Filtra gli elementi nella risposta",
													"    const testType = response.find(item => item.label === \"TestType\");",
													"    const testType2 = response.find(item => item.label === \"TestType2\");",
													"    ",
													"    // Verifica che entrambi esistano",
													"    pm.expect(testType).to.exist;",
													"    pm.expect(testType2).to.exist;",
													"",
													"    // Verifica che gli ID corrispondano a quelli nelle variabili di ambiente",
													"    pm.expect(testType.value).to.equal(idTypeEnv);",
													"    pm.expect(testType2.value).to.equal(idTypeEnv2);",
													"});",
													"",
													"// 4. Verifica la struttura di ogni elemento",
													"pm.test(\"Ogni elemento ha i campi '_id' e 'type'\", function () {",
													"    response.forEach(item => {",
													"        pm.expect(item).to.have.property(\"label\").that.is.a(\"string\");",
													"        pm.expect(item).to.have.property(\"value\").that.is.a(\"string\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/documents/types/all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												"types",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Document By Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is valid JSON\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an(\"object\");",
													"    pm.expect(jsonData).to.have.property(\"documents\").that.is.an(\"array\");",
													"});",
													"",
													"pm.test(\"All documents have the correct type object\", function () {",
													"    const jsonData = pm.response.json();",
													"    const expectedTypeId = pm.environment.get(\"idTypeEnv\"); // Recupera l'ID dalla variabile di ambiente",
													"",
													"    // Itera su tutti i documenti per validare il campo \"type\"",
													"    jsonData.documents.forEach((doc) => {",
													"        pm.expect(doc).to.have.property(\"type\").that.is.an(\"object\");",
													"        pm.expect(doc.type).to.have.property(\"_id\", expectedTypeId);",
													"        pm.expect(doc.type).to.have.property(\"type\", \"TestType\");",
													"    });",
													"});",
													"",
													"pm.test(\"Specific documents exists\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
													"",
													"    // Document 1",
													"    const doc1 = jsonData.documents.find(doc => doc.id === `${IdDoc1}`);",
													"    pm.expect(doc1).to.exist;",
													"    ",
													"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
													"",
													"    // Document 2",
													"    const doc2 = jsonData.documents.find(doc => doc.id === `${IdDoc2}`);",
													"    pm.expect(doc2).to.not.exist;",
													"    ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/documents/types/{{idType}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												"types",
												"{{idType}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "search",
							"item": [
								{
									"name": "errors",
									"item": [
										{
											"name": "bad scale",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response structure matches expected format (partial validation)\", () => {",
															"    const expectedErrors = [",
															"        {",
															"            \"type\": \"field\",",
															"            \"value\": \"aaa\",",
															"            \"path\": \"scale\",",
															"            \"location\": \"body\"",
															"        },",
															"        ",
															"    ];",
															"",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"errors\").that.is.an(\"array\").with.length(1);",
															"",
															"    expectedErrors.forEach((expectedError, index) => {",
															"        const actualError = jsonData.errors[index];",
															"        ",
															"        // Controllo solo delle proprietà selezionate",
															"        pm.expect(actualError.type).to.equal(expectedError.type);",
															"        pm.expect(actualError.value).to.equal(expectedError.value);",
															"        pm.expect(actualError.path).to.equal(expectedError.path);",
															"        pm.expect(actualError.location).to.equal(expectedError.location);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"scale\": \"aaa\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bad body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response structure matches expected format (partial validation)\", () => {",
															"    const expectedErrors = [",
															"        {",
															"            \"type\": \"field\",",
															"            ",
															"            \"location\": \"body\"",
															"        },",
															"        ",
															"    ];",
															"",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"errors\").that.is.an(\"array\").with.length(1);",
															"",
															"    expectedErrors.forEach((expectedError, index) => {",
															"        const actualError = jsonData.errors[index];",
															"        ",
															"        // Controllo solo delle proprietà selezionate",
															"        pm.expect(actualError.type).to.equal(expectedError.type);",
															"        pm.expect(actualError.location).to.equal(expectedError.location);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"scaleaaa\": \"aaa\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bad stakeholder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response structure matches expected format (partial validation)\", () => {",
															"    const expectedErrors = [",
															"        {",
															"            \"type\": \"field\",",
															"            \"value\": \"aaa\",",
															"            \"path\": \"stakeholders\",",
															"            \"location\": \"body\"",
															"        },",
															"        {",
															"            \"type\": \"field\",",
															"            \"value\": \"aaa\",",
															"            \"path\": \"stakeholders\",",
															"            \"location\": \"body\"",
															"        }",
															"    ];",
															"",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"errors\").that.is.an(\"array\").with.length(2);",
															"",
															"    expectedErrors.forEach((expectedError, index) => {",
															"        const actualError = jsonData.errors[index];",
															"        ",
															"        // Controllo solo delle proprietà selezionate",
															"        pm.expect(actualError.type).to.equal(expectedError.type);",
															"        pm.expect(actualError.value).to.equal(expectedError.value);",
															"        pm.expect(actualError.path).to.equal(expectedError.path);",
															"        pm.expect(actualError.location).to.equal(expectedError.location);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stakeholders\": \"aaa\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bad stakeholder 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response structure matches expected format (partial validation)\", () => {",
															"    const expectedErrors = [",
															"        {",
															"            \"type\": \"field\",",
															"            \"value\": [",
															"                \"aaa\"",
															"            ],",
															"            \"path\": \"stakeholders\",",
															"            \"location\": \"body\"",
															"        }",
															"    ];",
															"",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"errors\").that.is.an(\"array\").with.length(1);",
															"",
															"    expectedErrors.forEach((expectedError, index) => {",
															"        const actualError = jsonData.errors[index];",
															"        ",
															"        // Controllo solo delle proprietà selezionate",
															"        pm.expect(actualError.type).to.equal(expectedError.type);",
															"        pm.expect(actualError.value).that.is.an(\"array\").that.includes(expectedError.value[0])",
															"        pm.expect(actualError.path).to.equal(expectedError.path);",
															"        pm.expect(actualError.location).to.equal(expectedError.location);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stakeholders\": [\"aaa\"]\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bad date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Verifica che la risposta sia in formato JSON",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"// Verifica il contenuto della risposta",
															"pm.test(\"Response structure matches expected format (partial validation)\", () => {",
															"    const expectedErrors = [",
															"        {",
															"            \"type\": \"field\",",
															"            \"path\": \"date\",",
															"            \"location\": \"body\"",
															"        }",
															"    ];",
															"",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"errors\").that.is.an(\"array\").with.length(1);",
															"",
															"    expectedErrors.forEach((expectedError, index) => {",
															"        const actualError = jsonData.errors[index];",
															"        ",
															"        // Controllo solo delle proprietà selezionate",
															"        pm.expect(actualError.type).to.equal(expectedError.type);",
															"        pm.expect(actualError.path).to.equal(expectedError.path);",
															"        pm.expect(actualError.location).to.equal(expectedError.location);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"aaaa\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "base",
									"item": [
										{
											"name": "base-title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "base-summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'TestSummary' in summary\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"summary\");",
															"        pm.expect(doc.summary).to.include(\"TestSummary2\");",
															"    });",
															"});",
															"",
															"",
															"pm.test(\"Specific document exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.not.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestSummary2\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestSummary2\"]"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "filters",
									"item": [
										{
											"name": "filter 1 - stakeholder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"",
															"pm.test(\"All documents contain 'TestStakeholder' in stakeholders array\", function () {",
															"    const jsonData = pm.response.json();",
															"    const expectedId = pm.environment.get(\"idStakeholderEnv\"); // Recupera l'ID dalla variabile di ambiente",
															"",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"stakeholders\");",
															"        pm.expect(doc.stakeholders).to.be.an(\"array\").that.is.not.empty;",
															"",
															"        // Verifica che almeno un oggetto nell'array 'stakeholders' corrisponda alla struttura attesa",
															"        const validStakeholder = doc.stakeholders.some((stakeholder) => {",
															"            return stakeholder._id === expectedId && stakeholder.type === \"TestStakeholder\";",
															"        });",
															"",
															"        pm.expect(validStakeholder).to.be.true; // Almeno uno deve essere valido",
															"    });",
															"});",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.not.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stakeholders\": [\"{{idStakeholderEnv}}\"]\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 2 - multiple stakeholders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain exact combination of 'TestStakeholder' and 'TestStakeholder2' in stakeholders array\", function () {",
															"    const jsonData = pm.response.json();",
															"    const expectedId1 = pm.environment.get(\"idStakeholderEnv\");",
															"    const expectedId2 = pm.environment.get(\"idStakeholderEnv2\")",
															"",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"stakeholders\");",
															"        pm.expect(doc.stakeholders).to.be.an(\"array\").that.is.not.empty;",
															"",
															"        // Verifica che ci siano esattamente entrambi gli stakeholder nel campo 'stakeholders'",
															"        const stakeholderIds = doc.stakeholders.map(stakeholder => stakeholder._id);",
															"        const stakeholderTypes = doc.stakeholders.map(stakeholder => stakeholder.type);",
															"",
															"        // Verifica che l'array contenga entrambi gli ID e tipi esatti",
															"        pm.expect(stakeholderIds).to.include(expectedId1).and.to.include(expectedId2);",
															"        pm.expect(stakeholderTypes).to.include(\"TestStakeholder\").and.to.include(\"TestStakeholder2\");",
															"    });",
															"});",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.not.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stakeholders\": [\"{{idStakeholderEnv}}\", \"{{idStakeholderEnv2}}\"]\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 3 - multiple stakeholders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response contains the correct error message for not found stakeholders\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    // Verifica che la risposta contenga un array di errori",
															"    pm.expect(jsonData.errors).to.be.an(\"array\").that.is.not.empty;",
															"",
															"    // Verifica che l'errore per gli ID non trovati sia presente e corretto",
															"    const error = jsonData.errors[0];",
															"    pm.expect(error).to.have.property(\"type\", \"field\");",
															"    pm.expect(error).to.have.property(\"value\").that.is.an(\"array\").that.includes(\"60d1b9f7f61f4d6b0e8f1c3f\");",
															"    pm.expect(error).to.have.property(\"msg\", \"Stakeholder with ID 60d1b9f7f61f4d6b0e8f1c3f not found\");",
															"    pm.expect(error).to.have.property(\"path\", \"stakeholders\");",
															"    pm.expect(error).to.have.property(\"location\", \"body\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stakeholders\": [\"{{idStakeholderEnv}}\", \"60d1b9f7f61f4d6b0e8f1c3f\"]\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 4 - stakeholder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'TestStakeholder2' in stakeholders array\", function () {",
															"    const jsonData = pm.response.json();",
															"    const expectedId = pm.environment.get(\"idStakeholderEnv2\"); // Recupera l'ID dalla variabile di ambiente",
															"",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"stakeholders\");",
															"        pm.expect(doc.stakeholders).to.be.an(\"array\").that.is.not.empty;",
															"",
															"        // Verifica che almeno un oggetto nell'array 'stakeholders' corrisponda alla struttura attesa",
															"        const validStakeholder = doc.stakeholders.some((stakeholder) => {",
															"            return stakeholder._id === expectedId && stakeholder.type === \"TestStakeholder2\";",
															"        });",
															"",
															"        pm.expect(validStakeholder).to.be.true; // Almeno uno deve essere valido",
															"    });",
															"});",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stakeholders\": [\"{{idStakeholderEnv2}}\"]\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 5 - scale",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'ARCHITECTURAL' in scale\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"scale\").to.eql(\"ARCHITECTURAL\");",
															"    });",
															"});",
															"",
															"pm.test(\"All documents have architecturalScale in the correct format\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"architecturalScale\");",
															"",
															"        // Regex per il formato 1:xxx",
															"        const regex = /^1:\\d+$/;",
															"        pm.expect(doc.architecturalScale).to.match(regex, \"Architectural scale should follow the format 1:xxx\");",
															"    });",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"scale\": \"ARCHITECTURAL\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 5.1 - scale",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'ARCHITECTURAL' in scale\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"scale\").to.eql(\"ARCHITECTURAL\");",
															"    });",
															"});",
															"",
															"pm.test(\"All documents have architecturalScale in the correct format\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"architecturalScale\");",
															"",
															"        pm.expect(doc.architecturalScale).to.eql(\"1:1000\");",
															"    });",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.not.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"architecturalScale\": \"1:1000\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 6 - date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'date' in '2024'\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        ",
															"        pm.expect(doc).to.have.property(\"date\");",
															"        pm.expect(doc.date).to.match(/^2024/);",
															"    });",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2024\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 7 - date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'date' in '2024'\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        ",
															"        pm.expect(doc).to.have.property(\"date\");",
															"        pm.expect(doc.date).to.match(/^2024-10/);",
															"    });",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.not.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.not.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2024-10\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 8 - date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'date' in '2024'\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        ",
															"        pm.expect(doc).to.have.property(\"date\");",
															"        pm.expect(doc.date).to.match(/^2024-11/);",
															"    });",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2024-11\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 8.1 - date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'date' in '2024'\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        ",
															"        pm.expect(doc).to.have.property(\"date\");",
															"        pm.expect(doc.date).to.match(/^2024-11-06/);",
															"    });",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.not.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.not.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2024-11-06\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 9 - date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain 'date' in '2024'\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        ",
															"        pm.expect(doc).to.have.property(\"date\");",
															"        pm.expect(doc.date).to.match(/^2024-11-05/);",
															"    });",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2024-11-05\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 10 - types",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain the correct type\", function () {",
															"    const jsonData = pm.response.json();",
															"    ",
															"    // Recupera l'idType dalla variabile di ambiente",
															"    const expectedTypeId = pm.environment.get(\"idTypeEnv\");",
															"",
															"    // Itera su tutti i documenti e verifica che il tipo sia corretto",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"type\");",
															"        pm.expect(doc.type).to.have.property(\"_id\", expectedTypeId);",
															"        pm.expect(doc.type).to.have.property(\"type\", \"TestType\");",
															"    });",
															"});",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.not.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\": \"{{idTypeEnv}}\"\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "filter 11 - coordinates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is valid JSON\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.be.an(\"array\");",
															"});",
															"",
															"pm.test(\"All documents contain TestColosseo as name for coordinates\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        ",
															"        pm.expect(doc).to.have.property(\"coordinates\");",
															"        pm.expect(doc.coordinates.name).to.eql('TestColosseo');",
															"    });",
															"});",
															"",
															"pm.test(\"All documents contain 'TestDoc' in title\", function () {",
															"    const jsonData = pm.response.json();",
															"    jsonData.forEach((doc) => {",
															"        pm.expect(doc).to.have.property(\"title\");",
															"        pm.expect(doc.title).to.include(\"TestDoc\");",
															"    });",
															"});",
															"",
															"",
															"",
															"pm.test(\"Specific documents exists\", function () {",
															"    const jsonData = pm.response.json();",
															"",
															"    const IdDoc1 = pm.environment.get(\"idDocumentEnv\")",
															"",
															"    // Document 1",
															"    const doc1 = jsonData.find(doc => doc.id === `${IdDoc1}`);",
															"    pm.expect(doc1).to.exist;",
															"    ",
															"    const IdDoc2 = pm.environment.get(\"idDocumentEnv2\")",
															"",
															"    // Document 2",
															"    const doc2 = jsonData.find(doc => doc.id === `${IdDoc2}`);",
															"    pm.expect(doc2).to.exist;",
															"    ",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"coordinates\": \"{{idPointEnv}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/search?keywords=[\"TestDoc\"]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														"search"
													],
													"query": [
														{
															"key": "keywords",
															"value": "[\"TestDoc\"]"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Estrai la risposta JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Estrai le variabili d'ambiente",
											"const idDoc1 = pm.environment.get(\"idDocumentEnv\");",
											"const idDoc2 = pm.environment.get(\"idDocumentEnv2\");",
											"",
											"// Test codice di stato della risposta",
											"pm.test(\"Codice di stato è 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test tempo di risposta",
											"pm.test(\"Tempo di risposta inferiore a 500 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"// Controlla che l'array contenga almeno due valori",
											"pm.test(\"La risposta contiene almeno due documenti\", function () {",
											"    pm.expect(jsonResponse).to.be.an(\"array\");",
											"    pm.expect(jsonResponse.length).to.be.at.least(2);",
											"});",
											"",
											"// Verifica che l'array contenga documenti con gli ID specificati",
											"pm.test(\"L'array contiene i documenti con idDoc1 e idDoc2\", function () {",
											"    const docIds = jsonResponse.map(doc => doc.id);",
											"    pm.expect(docIds).to.include(idDoc1);",
											"    pm.expect(docIds).to.include(idDoc2);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/documents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"documents"
									]
								}
							},
							"response": [
								{
									"name": "List of all documents",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/documents",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"INFORMATIVE_DOC\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK2\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Polygon\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  },\n  {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"stakeholders\": \"<string>\",\n    \"scale\": \"<string>\",\n    \"type\": \"PRESCRIPTIVE_DOC\",\n    \"connections\": [\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK3\"\n      },\n      {\n        \"document\": \"<string>\",\n        \"type\": \"LINK1\"\n      }\n    ],\n    \"language\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"date\": \"<string>\",\n    \"coordinates\": {\n      \"id\": \"<string>\",\n      \"type\": \"Polygon\",\n      \"coordinates\": [\n        \"<number>\",\n        \"<number>\"\n      ],\n      \"name\": \"<string>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "graph",
					"item": [
						{
							"name": "info graph",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has status 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is below 2000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											"pm.test(\"Response structure is valid\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    // Verifica che la risposta contenga le proprietà minYear, maxYear, infoYear",
											"    pm.expect(jsonData).to.have.all.keys(\"minYear\", \"maxYear\", \"infoYear\");",
											"",
											"    // Verifica che infoYear sia un array",
											"    pm.expect(jsonData.infoYear).to.be.an(\"array\");",
											"",
											"    // Verifica che tutti gli oggetti in infoYear abbiano la struttura corretta",
											"    jsonData.infoYear.forEach((item) => {",
											"        pm.expect(item).to.have.all.keys(\"year\", \"types\");",
											"        pm.expect(item.year).to.be.a(\"string\");",
											"        pm.expect(item.types).to.be.an(\"array\");",
											"",
											"        item.types.forEach((type) => {",
											"            pm.expect(type).to.have.all.keys(\"scale\", \"qty\");",
											"            pm.expect(type.scale).to.be.a(\"string\");",
											"            pm.expect(type.qty).to.be.a(\"number\");",
											"        });",
											"    });",
											"});",
											"",
											"pm.test(\"In 2024, there are at least 4 'ARCHITECTURAL' and 3 'TEXT'\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    // Trova l'oggetto che corrisponde all'anno 2024",
											"    const year2024 = jsonData.infoYear.find(item => item.year === \"2024\");",
											"",
											"    // Verifica che l'anno 2024 esista",
											"    pm.expect(year2024).to.exist;",
											"",
											"    // Filtra per \"ARCHITECTURAL\" e \"TEXT\" e calcola la quantità",
											"    const architecturalCount = year2024.types.filter(type => type.scale === \"ARCHITECTURAL\").reduce((sum, type) => sum + type.qty, 0);",
											"    const textCount = year2024.types.filter(type => type.scale === \"TEXT\").reduce((sum, type) => sum + type.qty, 0);",
											"",
											"    // Verifica che nel 2024 ci siano almeno 4 \"ARCHITECTURAL\" e almeno 3 \"TEXT\"",
											"    pm.expect(architecturalCount).to.be.at.least(4);",
											"    pm.expect(textCount).to.be.at.least(3);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5001/api/graph",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"graph"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "clean",
					"item": [
						{
							"name": "logout",
							"item": [
								{
									"name": "Logout a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response has a 'message' field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Message field is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"logout"
											]
										}
									},
									"response": [
										{
											"name": "User logged out successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"logout"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "auth-token",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"logout"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "DeleteCoordinate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field 'message'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response schema matches the expected schema\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/coordinates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"coordinates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"pm.test(\"Response is not null\", function () {",
											"    pm.expect(pm.response.text()).to.not.be.null;",
											"});",
											"",
											"",
											"pm.test(\"Response follows the expected schema for user data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"pm.test(\"Response is not null\", function () {",
											"    pm.expect(pm.response.text()).to.not.be.null;",
											"});",
											"",
											"",
											"pm.test(\"Response follows the expected schema for user data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/documents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Document Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"pm.test(\"Response is not null\", function () {",
											"    pm.expect(pm.response.text()).to.not.be.null;",
											"});",
											"",
											"",
											"pm.test(\"Response follows the expected schema for user data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/document-types",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"document-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Stakeholder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"pm.test(\"Response is not null\", function () {",
											"    pm.expect(pm.response.text()).to.not.be.null;",
											"});",
											"",
											"",
											"pm.test(\"Response follows the expected schema for user data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stakeholders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stakeholders"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "auth-token",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5001"
		},
		{
			"key": "idPoint",
			"value": "",
			"type": "string"
		},
		{
			"key": "idDocument",
			"value": ""
		},
		{
			"key": "idDocument2",
			"value": ""
		},
		{
			"key": "presignedUrl",
			"value": ""
		},
		{
			"key": "mediaId",
			"value": ""
		},
		{
			"key": "mediaUrl",
			"value": ""
		},
		{
			"key": "idStakeholder",
			"value": ""
		},
		{
			"key": "idStakeholder2",
			"value": ""
		},
		{
			"key": "idType",
			"value": ""
		},
		{
			"key": "idType2",
			"value": ""
		}
	]
}